[
  {
    "instance_id": "sympy__sympy-13878",
    "model_patch": "diff --git a/sympy/stats/crv_types.py b/sympy/stats/crv_types.py\nindex fff7da80ae..78796a91c3 100644\n--- a/sympy/stats/crv_types.py\n+++ b/sympy/stats/crv_types.py\n@@ -152,6 +152,15 @@ class ArcsinDistribution(SingleContinuousDistribution):\n \n     def pdf(self, x):\n         return 1/(pi*sqrt((x - self.a)*(self.b - x)))\n+    def _cdf(self, x):\n+        from sympy import Piecewise, sqrt, asin, pi, And\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (0, x < a),\n+            (2/pi * asin(sqrt((x - a)/(b - a))), And(x >= a, x <= b)),\n+            (1, True)\n+        )\n+    \n \n def Arcsin(name, a=0, b=1):\n     r\"\"\"\n@@ -669,6 +678,14 @@ class DagumDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         p, a, b = self.p, self.a, self.b\n         return a*p/x*((x/b)**(a*p)/(((x/b)**a + 1)**(p + 1)))\n+    def _cdf(self, x):\n+        from sympy import Piecewise\n+        p, a, b = self.p, self.a, self.b\n+        return Piecewise(\n+            (0, x < 0),\n+            (1 - (1 + (x/b)**a)**(-p), True)\n+        )\n+    \n \n \n def Dagum(name, p, a, b):\n@@ -1041,6 +1058,14 @@ def __new__(cls, a, s=1, m=0):\n     def pdf(self, x):\n         a, s, m = self.a, self.s, self.m\n         return a/s * ((x-m)/s)**(-1-a) * exp(-((x-m)/s)**(-a))\n+    def _cdf(self, x):\n+        from sympy import Piecewise, exp\n+        a, s, m = self.a, self.s, self.m\n+        return Piecewise(\n+            (0, x < m),\n+            (exp(-(((x - m)/s)**(-a))), True)\n+        )\n+    \n \n def Frechet(name, a, s=1, m=0):\n     r\"\"\"\n@@ -1110,6 +1135,14 @@ def pdf(self, x):\n \n     def sample(self):\n         return random.gammavariate(self.k, self.theta)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, gamma, lowergamma\n+        k, theta = self.k, self.theta\n+        return Piecewise(\n+            (0, x < 0),\n+            (lowergamma(k, x/theta)/gamma(k), True)\n+        )\n+    \n \n \n def Gamma(name, k, theta):\n@@ -1199,6 +1232,14 @@ def check(a, b):\n     def pdf(self, x):\n         a, b = self.a, self.b\n         return b**a/gamma(a) * x**(-a-1) * exp(-b/x)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, gamma, uppergamma\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (0, x < 0),\n+            (uppergamma(a, b/x)/gamma(a), True)\n+        )\n+    \n \n def GammaInverse(name, a, b):\n     r\"\"\"\n@@ -1384,6 +1425,15 @@ def check(a, b):\n     def pdf(self, x):\n         a, b = self.a, self.b\n         return a * b * x**(a-1) * (1-x**a)**(b-1)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, StrictLessThan as Lt, StrictGreaterThan as Gt\n+        a, b = self.a, self.b\n+        return Piecewise(\n+            (0, Lt(x, 0)),\n+            (1, Gt(x, 1)),\n+            (1 - (1 - x**a)**b, True)\n+        )\n+      \n \n def Kumaraswamy(name, a, b):\n     r\"\"\"\n@@ -1444,6 +1494,14 @@ class LaplaceDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         mu, b = self.mu, self.b\n         return 1/(2*b)*exp(-Abs(x - mu)/b)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, exp, S, StrictLessThan as Lt\n+        mu, b = self.mu, self.b\n+        return Piecewise(\n+            (S.Half*exp((x - mu)/b), Lt(x, mu)),\n+            (1 - S.Half*exp(-(x - mu)/b), True)\n+        )\n+      \n \n \n def Laplace(name, mu, b):\n@@ -1500,6 +1558,11 @@ class LogisticDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         mu, s = self.mu, self.s\n         return exp(-(x - mu)/s)/(s*(1 + exp(-(x - mu)/s))**2)\n+    def _cdf(self, x):\n+        from sympy import exp\n+        mu, s = self.mu, self.s\n+        return 1/(1 + exp(-(x - mu)/s))\n+      \n \n \n def Logistic(name, mu, s):\n@@ -1710,6 +1773,14 @@ class NakagamiDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         mu, omega = self.mu, self.omega\n         return 2*mu**mu/(gamma(mu)*omega**mu)*x**(2*mu - 1)*exp(-mu/omega*x**2)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, gamma, lowergamma, StrictLessThan as Lt\n+        mu, omega = self.mu, self.omega\n+        return Piecewise(\n+            (0, Lt(x, 0)),\n+            (lowergamma(mu, mu*x**2/omega)/gamma(mu), True)\n+        )\n+      \n \n \n def Nakagami(name, mu, omega):\n@@ -2226,6 +2297,16 @@ class StudentTDistribution(SingleContinuousDistribution):\n     def pdf(self, x):\n         nu = self.nu\n         return 1/(sqrt(nu)*beta_fn(S(1)/2, nu/2))*(1 + x**2/nu)**(-(nu + 1)/2)\n+    def _cdf(self, x):\n+        from sympy import Piecewise, gamma, sqrt, pi, hyper, Rational, StrictLessThan as Lt\n+        nu = self.nu\n+        cpos = Rational(1,2) + x*gamma((nu+1)/2)/(sqrt(nu*pi)*gamma(nu/2))*hyper([Rational(1,2),(nu+1)/2],[Rational(3,2)], -x**2/nu)\n+        cneg = 1 - cpos.subs(x, -x)\n+        return Piecewise(\n+            (cneg, Lt(x, 0)),\n+            (cpos, True)\n+        )\n+      \n \n \n def StudentT(name, nu):\n@@ -2553,6 +2634,17 @@ def pdf(self, x):\n         k = Dummy(\"k\")\n         return 1/factorial(\n             n - 1)*Sum((-1)**k*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x)))\n+    def _cdf(self, x):\n+        from sympy import Piecewise, floor, Sum, binomial, factorial, Dummy, StrictLessThan as Lt, StrictGreaterThan as Gt\n+        n = self.n\n+        k = Dummy('k', integer=True)\n+        expr = Sum(((-1)**k)*binomial(n, k)*(x - k)**(n - 1), (k, 0, floor(x))) / factorial(n - 1)\n+        return Piecewise(\n+            (0, Lt(x, 0)),\n+            (1, Gt(x, n)),\n+            (expr, True)\n+        )\n+      \n \n \n \ndiff --git a/test_arcsin_cdf.py b/test_arcsin_cdf.py\nnew file mode 100644\nindex 0000000000..6a3d703b10\n--- /dev/null\n+++ b/test_arcsin_cdf.py\n@@ -0,0 +1,27 @@\n+import sys\n+import math\n+from sympy.stats import cdf, Arcsin\n+from sympy import asin, sqrt, pi, N\n+\n+def main():\n+    print(\"Begin arcsin cdf test.\")\n+    # Compute the numeric result of calling the cdf at x=1 for Arcsin(0,3)\n+    res = cdf(Arcsin(\"X\", 0, 3))(1)\n+    print(f\"Sympy cdf(Arcsin(0,3))(1) = {res}\")\n+    # Expected value is 2/pi * asin(sqrt(1/3))\n+    expected = 2/pi*asin(sqrt(1/3))\n+    print(f\"Expected: {expected}\")\n+\n+    difference = abs(N(res - expected))\n+    print(f\"Difference = {difference}\")\n+\n+    # We consider it passing if difference is small\n+    if difference < 1e-7:\n+        print(\"Test PASSED. Arcsin CDF at X=1 is correct.\")\n+        sys.exit(0)\n+    else:\n+        print(\"Test FAILED. Arcsin CDF was incorrect or symbolic integration not working.\")\n+        sys.exit(1)\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/test_precomputed_cdfs.py b/test_precomputed_cdfs.py\nnew file mode 100644\nindex 0000000000..fabd980a9b\n--- /dev/null\n+++ b/test_precomputed_cdfs.py\n@@ -0,0 +1,137 @@\n+import sys\n+import math\n+from sympy import S, N\n+from sympy.stats import cdf, Arcsin, Dagum, Erlang, Frechet, Gamma, GammaInverse\n+from sympy.stats import Kumaraswamy, Laplace, Logistic, Nakagami, StudentT, UniformSum\n+from sympy.core import pi, sqrt, asin\n+\n+def approx_equal(a, b, tol=1e-7):\n+    return abs(a - b) < tol\n+\n+def main():\n+    print(\"Begin test_precomputed_cdfs.py script.\")\n+    failures = 0\n+\n+    # Each test calls cdf(...)(value) and compares with an expected numeric result.\n+    # If a distribution is not yet fixed on HEAD, it may fail or hang.\n+\n+    # 1) Arcsin(0, 3) at x=1\n+    arcsin_val = cdf(Arcsin(\"x\", 0, 3))(1)\n+    arcsin_expected = 2/math.pi * math.asin(1/math.sqrt(3))\n+    arcsin_num = float(arcsin_val.evalf())\n+    print(\"Arcsin cdf(1) =\", arcsin_num, \" expected =\", arcsin_expected)\n+    if not approx_equal(arcsin_num, arcsin_expected):\n+        print(\"  FAIL: Arcsin cdf mismatch.\")\n+        failures += 1\n+\n+    # 2) Dagum(1/3, 1/5, 2) at x=3\n+    from sympy import Pow\n+    p = S(1)/3\n+    a = S(1)/5\n+    b = S(2)\n+    dagum_val = cdf(Dagum(\"x\", p, a, b))(3)\n+    dagum_expected = 1 - (1 + Pow(S(3)/S(2), a))**(-p)\n+    dagum_num = float(dagum_val.evalf())\n+    dagum_exp_num = float(dagum_expected.evalf())\n+    print(\"Dagum cdf(3) =\", dagum_num, \" expected =\", dagum_exp_num)\n+    if not approx_equal(dagum_num, dagum_exp_num):\n+        print(\"  FAIL: Dagum cdf mismatch.\")\n+        failures += 1\n+\n+    # 3) Erlang(1, 1) at x=1\n+    erlang_val = cdf(Erlang(\"x\", 1, 1))(1)\n+    erlang_expected = 1 - math.e**(-1)\n+    erlang_num = float(erlang_val.evalf())\n+    print(\"Erlang cdf(1) =\", erlang_num, \" expected =\", erlang_expected)\n+    if not approx_equal(erlang_num, erlang_expected):\n+        print(\"  FAIL: Erlang cdf mismatch.\")\n+        failures += 1\n+\n+    # 4) Frechet(4/3,1,2) at x=3\n+    frechet_val = cdf(Frechet(\"x\", S(4)/3, 1, 2))(3)\n+    frechet_expected = math.e**(-1)\n+    frechet_num = float(frechet_val.evalf())\n+    print(\"Frechet cdf(3) =\", frechet_num, \" expected =\", frechet_expected)\n+    if not approx_equal(frechet_num, frechet_expected):\n+        print(\"  FAIL: Frechet cdf mismatch.\")\n+        failures += 1\n+\n+    # 5) Gamma(0.1, 2) at x=3\n+    from sympy import lowergamma, gamma\n+    gamma_val = cdf(Gamma(\"x\", 0.1, 2))(3)\n+    gamma_num = float(gamma_val.evalf())\n+    gamma_expected_expr = lowergamma(S(0.1), S(3)/S(2))/gamma(S(0.1))\n+    gamma_expected = float(gamma_expected_expr.evalf())\n+    print(\"Gamma cdf(3) =\", gamma_num, \" expected =\", gamma_expected)\n+    if not approx_equal(gamma_num, gamma_expected):\n+        print(\"  FAIL: Gamma cdf mismatch.\")\n+        failures += 1\n+\n+    # 6) GammaInverse(5/7, 2) at x=3\n+    from sympy import uppergamma\n+    invgamma_val = cdf(GammaInverse(\"x\", S(5)/7, 2))(3)\n+    invgamma_num = float(invgamma_val.evalf())\n+    invgamma_expected_expr = uppergamma(S(5)/7, S(2)/S(3))/gamma(S(5)/7)\n+    invgamma_expected = float(invgamma_expected_expr.evalf())\n+    print(\"GammaInverse cdf(3) =\", invgamma_num, \" expected =\", invgamma_expected)\n+    if not approx_equal(invgamma_num, invgamma_expected):\n+        print(\"  FAIL: GammaInverse cdf mismatch.\")\n+        failures += 1\n+\n+    # 7) Kumaraswamy(1/123, 5) at x=1/3\n+    kuma_val = cdf(Kumaraswamy(\"x\", S(1)/123, 5))(S(1)/3)\n+    kuma_num = float(kuma_val.evalf())\n+    kuma_expected = 1 - (1 - (1/3)**(1/S(123)))**5\n+    kuma_exp_num = float(kuma_expected.evalf())\n+    print(\"Kumaraswamy cdf(1/3) =\", kuma_num, \" expected =\", kuma_exp_num)\n+    if not approx_equal(kuma_num, kuma_exp_num):\n+        print(\"  FAIL: Kumaraswamy cdf mismatch.\")\n+        failures += 1\n+\n+    # 8) Laplace(2,3) at x=5\n+    lap_val = cdf(Laplace(\"x\", 2, 3))(5)\n+    lap_num = float(lap_val.evalf())\n+    lap_expected = 1 - 0.5*math.e**-1\n+    print(\"Laplace cdf(5) =\", lap_num, \" expected =\", lap_expected)\n+    if not approx_equal(lap_num, lap_expected):\n+        print(\"  FAIL: Laplace cdf mismatch.\")\n+        failures += 1\n+\n+    # 9) Logistic(1,0.1) at x=2\n+    logi_val = cdf(Logistic(\"x\", 1, 0.1))(2)\n+    logi_num = float(logi_val.evalf())\n+    logi_expected = 1.0/(1 + math.e**(-10))\n+    print(\"Logistic cdf(2) =\", logi_num, \" expected =\", logi_expected)\n+    if not approx_equal(logi_num, logi_expected):\n+        print(\"  FAIL: Logistic cdf mismatch.\")\n+        failures += 1\n+\n+    #10) Nakagami(7/3,1) at x=2\n+    naka_val = cdf(Nakagami(\"x\", S(7)/3, 1))(2)\n+    naka_num = float(naka_val.evalf())\n+    print(\"Nakagami cdf(2) =\", naka_num)\n+    if not (0 < naka_num < 1):\n+        print(\"  FAIL: Nakagami cdf(2) is not in (0,1).\")\n+        failures += 1\n+\n+    #11) StudentT(10) at x=2\n+    stud_val = cdf(StudentT(\"x\", 10))(2)\n+    stud_num = float(stud_val.evalf())\n+    print(\"StudentT(10) cdf(2) =\", stud_num)\n+    if not approx_equal(stud_num, 0.92135, 1e-4):\n+        print(\"  FAIL: StudentT(10) cdf(2) mismatch.\")\n+        failures += 1\n+\n+    #12) UniformSum(5) at x=2\n+    usum_val = cdf(UniformSum(\"x\", 5))(2)\n+    usum_num = float(usum_val.evalf())\n+    print(\"UniformSum(5) cdf(2) =\", usum_num)\n+    if not (0 < usum_num < 1):\n+        print(\"  FAIL: UniformSum(5) cdf(2) is not in (0,1).\")\n+        failures += 1\n+\n+    print(f\"Total failures = {failures}\")\n+    sys.exit(1 if failures else 0)\n+\n+if __name__ == \"__main__\":\n+    main()\n",
    "model_name_or_path": "readytogo-crosschecked"
  }
]