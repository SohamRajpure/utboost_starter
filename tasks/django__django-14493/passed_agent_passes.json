[
  {
    "instance_id": "django__django-14493",
    "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex f957a667b2..bf799d4e12 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -261,6 +261,7 @@ class HashedFilesMixin:\n \n         paths = {path: paths[path] for path in adjustable_paths}\n \n+        substitutions = False  # Initialize substitutions before the loop\n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\ndiff --git a/reproduce_bug.py b/reproduce_bug.py\nnew file mode 100644\nindex 0000000000..dc5172de84\n--- /dev/null\n+++ b/reproduce_bug.py\n@@ -0,0 +1,60 @@\n+\"\"\"\n+Script to reproduce the bug where ManifestStaticFilesStorage crashes with max_post_process_passes = 0\n+\"\"\"\n+import os\n+import sys\n+import tempfile\n+import shutil\n+\n+# Add the Django project to the Python path\n+sys.path.insert(0, os.path.abspath('/testbed'))\n+\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.core.management import call_command\n+\n+# Define a custom storage class with max_post_process_passes = 0\n+class MyManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n+\n+def main():\n+    # Create a temporary directory for the test\n+    temp_dir = tempfile.mkdtemp()\n+    try:\n+        # Configure Django settings\n+        settings.configure(\n+            DEBUG=True,\n+            SECRET_KEY='secret',\n+            STATIC_ROOT=os.path.join(temp_dir, 'static'),\n+            STATIC_URL='/static/',\n+            INSTALLED_APPS=[\n+                'django.contrib.staticfiles',\n+            ],\n+            STATICFILES_STORAGE='__main__.MyManifestStaticFilesStorage',\n+        )\n+\n+        # Create a test static file\n+        os.makedirs(settings.STATIC_ROOT, exist_ok=True)\n+        with open(os.path.join(settings.STATIC_ROOT, 'test.css'), 'w') as f:\n+            f.write('body { color: red; }')\n+\n+        # Import Django setup after settings are configured\n+        from django import setup\n+        setup()\n+\n+        # Try to run collectstatic, which should trigger the bug\n+        print(\"Running collectstatic...\")\n+        call_command('collectstatic', '--noinput', '--clear')\n+        \n+        print(\"Success! The bug has been fixed.\")\n+\n+    except Exception as e:\n+        print(f\"Error occurred: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+    finally:\n+        # Clean up the temporary directory\n+        shutil.rmtree(temp_dir)\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/test_max_post_process_passes_zero.py b/test_max_post_process_passes_zero.py\nnew file mode 100644\nindex 0000000000..16fa7d59d9\n--- /dev/null\n+++ b/test_max_post_process_passes_zero.py\n@@ -0,0 +1,57 @@\n+\"\"\"\n+Test script to verify that ManifestStaticFilesStorage works when max_post_process_passes = 0\n+\"\"\"\n+import os\n+import sys\n+import tempfile\n+import shutil\n+\n+# Add the Django project to the Python path\n+sys.path.insert(0, os.path.abspath('/testbed'))\n+\n+from django.conf import settings\n+from django.core.management import call_command\n+\n+def main():\n+    # Create a temporary directory for the test\n+    temp_dir = tempfile.mkdtemp()\n+    try:\n+        # Configure Django settings\n+        settings.configure(\n+            DEBUG=True,\n+            SECRET_KEY='secret',\n+            STATIC_ROOT=os.path.join(temp_dir, 'static'),\n+            STATIC_URL='/static/',\n+            INSTALLED_APPS=[\n+                'django.contrib.staticfiles',\n+            ],\n+            STATICFILES_STORAGE='zero_pass_storage.ZeroPassManifestStaticFilesStorage',\n+        )\n+        \n+        # Import Django setup after settings are configured\n+        from django import setup\n+        setup()\n+        \n+        # Create a test static file\n+        os.makedirs(settings.STATIC_ROOT, exist_ok=True)\n+        with open(os.path.join(settings.STATIC_ROOT, 'test.css'), 'w') as f:\n+            f.write('body { color: red; }')\n+            \n+        # Try to run collectstatic, which would have crashed before our fix\n+        print(\"Running collectstatic with max_post_process_passes=0...\")\n+        call_command('collectstatic', '--noinput', '--clear', verbosity=0)\n+        \n+        print(\"Success! The test passed without crashing.\")\n+        return True\n+    except Exception as e:\n+        print(f\"Test failed with error: {e}\")\n+        import traceback\n+        traceback.print_exc()\n+        return False\n+    finally:\n+        # Clean up the temporary directory\n+        shutil.rmtree(temp_dir)\n+\n+if __name__ == \"__main__\":\n+    success = main()\n+    sys.exit(0 if success else 1)\ndiff --git a/tests/staticfiles_tests/test_zero_passes.py b/tests/staticfiles_tests/test_zero_passes.py\nnew file mode 100644\nindex 0000000000..080e761081\n--- /dev/null\n+++ b/tests/staticfiles_tests/test_zero_passes.py\n@@ -0,0 +1,50 @@\n+\"\"\"\n+Tests for the staticfiles storage with max_post_process_passes set to 0\n+\"\"\"\n+import tempfile\n+import shutil\n+import os\n+\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+from django.test import SimpleTestCase, override_settings\n+from django.core.management import call_command\n+\n+class ZeroPassManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    \"\"\"\n+    Custom ManifestStaticFilesStorage with max_post_process_passes set to 0.\n+    This tests the fix for the issue where an UnboundLocalError would be raised\n+    because 'substitutions' was referenced before assignment.\n+    \"\"\"\n+    max_post_process_passes = 0\n+\n+\n+class ZeroPassesTest(SimpleTestCase):\n+    \"\"\"Test the ManifestStaticFilesStorage with max_post_process_passes=0\"\"\"\n+    \n+    def setUp(self):\n+        # Create a temporary directory for the test\n+        self.temp_dir = tempfile.mkdtemp()\n+        self.static_dir = os.path.join(self.temp_dir, 'static')\n+        os.makedirs(self.static_dir, exist_ok=True)\n+        \n+        # Create a test static file\n+        with open(os.path.join(self.static_dir, 'test.css'), 'w') as f:\n+            f.write('body { color: red; }')\n+    \n+    def tearDown(self):\n+        # Clean up the temporary directory\n+        shutil.rmtree(self.temp_dir)\n+\n+    @override_settings(\n+        STATICFILES_STORAGE='staticfiles_tests.test_zero_passes.ZeroPassManifestStaticFilesStorage',\n+    )\n+    def test_zero_post_process_passes(self):\n+        \"\"\"\n+        Test that collectstatic works without error when max_post_process_passes = 0\n+        \"\"\"\n+        with self.settings(STATIC_ROOT=self.static_dir):\n+            # This will raise UnboundLocalError if the fix is removed\n+            call_command('collectstatic', '--noinput', '--clear', verbosity=0)\n+        \n+        # If we get here, the test passed\n+        self.assertTrue(True)\ndiff --git a/zero_pass_storage.py b/zero_pass_storage.py\nnew file mode 100644\nindex 0000000000..9ead66bd9a\n--- /dev/null\n+++ b/zero_pass_storage.py\n@@ -0,0 +1,7 @@\n+\"\"\"\n+Module containing a ManifestStaticFilesStorage subclass with max_post_process_passes = 0\n+\"\"\"\n+from django.contrib.staticfiles.storage import ManifestStaticFilesStorage\n+\n+class ZeroPassManifestStaticFilesStorage(ManifestStaticFilesStorage):\n+    max_post_process_passes = 0\n",
    "model_name_or_path": "claude-sonnet-3.7"
  }
]