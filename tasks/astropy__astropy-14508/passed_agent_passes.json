[
  {
    "instance_id": "astropy__astropy-14508",
    "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..e8148bc799 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1298,36 +1298,52 @@ def _format_value(value):\n \n \n def _format_float(value):\n-    \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n-        # On some Windows builds of Python (and possibly other platforms?) the\n-        # exponent is zero-padded out to, it seems, three digits.  Normalize\n-        # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n-        if exponent[0] in (\"+\", \"-\"):\n+    \"\"\"Format a floating number to make sure it gets the decimal point and fits\n+    within 20 characters while using the most compact accurate representation.\"\"\"\n+    \n+    # First try the built-in string representation as it's often most compact\n+    value_str = str(value)\n+    \n+    # Check if we need to use scientific notation by validating the str result\n+    # We need scientific notation if:\n+    # 1. The string is too long (>20 chars)\n+    # 2. The value can't be exactly recovered from the string\n+    try:\n+        if len(value_str) > 20 or float(value_str) != value:\n+            # Fall back to scientific notation with high precision\n+            value_str = f\"{value:.16G}\"\n+    except (ValueError, OverflowError):\n+        # If there's any issue with the conversion, fall back to scientific notation\n+        value_str = f\"{value:.16G}\"\n+    \n+    # Ensure there's a decimal point if needed\n+    if '.' not in value_str and 'E' not in value_str:\n+        value_str += '.0'\n+    \n+    # Normalize scientific notation\n+    if 'e' in value_str:\n+        significand, exponent = value_str.split('e')\n+        if exponent[0] in ('+', '-'):\n             sign = exponent[0]\n             exponent = exponent[1:]\n         else:\n-            sign = \"\"\n+            sign = ''\n         value_str = f\"{significand}E{sign}{int(exponent):02d}\"\n-\n-    # Limit the value string to at most 20 characters.\n+    \n+    # Limit the value string to 20 characters if necessary\n     str_len = len(value_str)\n-\n     if str_len > 20:\n-        idx = value_str.find(\"E\")\n-\n+        idx = value_str.find('E')\n         if idx < 0:\n             value_str = value_str[:20]\n         else:\n-            value_str = value_str[: 20 - (str_len - idx)] + value_str[idx:]\n-\n+            # Preserve the exponent part and truncate the significand\n+            value_str = value_str[:20 - (str_len - idx)] + value_str[idx:]\n+    \n     return value_str\n \n \n+\n def _pad(input):\n     \"\"\"Pad blank space to the input string to be multiple of 80.\"\"\"\n     _len = len(input)\n@@ -1344,3 +1360,4 @@ def _pad(input):\n     else:\n         strlen = _len % Card.length\n         return input + \" \" * (Card.length - strlen)\n+\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..d20230a63f\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,9 @@\n+from astropy.io import fits\n+\n+# Create a Card with the same values as in the example\n+new_c = fits.Card('HIERARCH ESO IFM CL RADIUS', 0.009125, '[m] radius arround actuator to avoid')\n+\n+print(\"Card representation:\")\n+print(repr(new_c))\n+print(\"\\nCard string format:\")\n+print(str(new_c))\n",
    "model_name_or_path": "openhands"
  },
  {
    "instance_id": "astropy__astropy-14508",
    "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 118bfced89..934fbc6b0f 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,14 +1299,22 @@ def _format_value(value):\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n+    # First try using str() to get the most compact representation\n+    value_str = str(value)\n+    \n+    # If str() gives us a string longer than 20 chars or doesn't include a decimal point,\n+    # fall back to the scientific notation\n+    if len(value_str) > 20 or (\".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str):\n+        value_str = f\"{value:.16G}\"\n+        \n+    # Ensure we have a decimal point if not in scientific notation\n+    if \".\" not in value_str and \"E\" not in value_str and \"e\" not in value_str:\n         value_str += \".0\"\n-    elif \"E\" in value_str:\n+    elif \"E\" in value_str or \"e\" in value_str:\n         # On some Windows builds of Python (and possibly other platforms?) the\n         # exponent is zero-padded out to, it seems, three digits.  Normalize\n         # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n+        significand, exponent = value_str.split(\"E\" if \"E\" in value_str else \"e\")\n         if exponent[0] in (\"+\", \"-\"):\n             sign = exponent[0]\n             exponent = exponent[1:]\ndiff --git a/astropy/io/fits/tests/test_header.py b/astropy/io/fits/tests/test_header.py\nindex a8f4e1160f..91f4fbef6a 100644\n--- a/astropy/io/fits/tests/test_header.py\n+++ b/astropy/io/fits/tests/test_header.py\n@@ -137,6 +137,10 @@ class TestHeaderFunctions(FitsTestCase):\n         ):\n             assert str(c) == _pad(\"FLOATNUM= -4.6737463674763E+32\")\n \n+        # Test for compact float representation\n+        c = fits.Card(\"RADIUS\", 0.009125, \"[m] radius arround actuator to avoid\")\n+        assert str(c).strip() == \"RADIUS  =             0.009125 / [m] radius arround actuator to avoid\"\n+\n     def test_complex_value_card(self):\n         \"\"\"Test Card constructor with complex value\"\"\"\n \n",
    "model_name_or_path": "emergent-e1-241223"
  },
  {
    "instance_id": "astropy__astropy-14508",
    "model_patch": "diff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -1299,14 +1299,19 @@\n \n def _format_float(value):\n     \"\"\"Format a floating number to make sure it gets the decimal point.\"\"\"\n-    value_str = f\"{value:.16G}\"\n-    if \".\" not in value_str and \"E\" not in value_str:\n-        value_str += \".0\"\n-    elif \"E\" in value_str:\n+    value_str = str(value)\n+    if len(value_str) > 20:\n+        value_str = f\"{value:.16G}\"\n+        if \".\" not in value_str and \"E\" not in value_str:\n+            value_str += \".0\"\n+    if \"E\" in value_str or \"e\" in value_str:\n         # On some Windows builds of Python (and possibly other platforms?) the\n         # exponent is zero-padded out to, it seems, three digits.  Normalize\n         # the format to pad only to two digits.\n-        significand, exponent = value_str.split(\"E\")\n+        if \"E\" in value_str:\n+            significand, exponent = value_str.split(\"E\")\n+        else:\n+            significand, exponent = value_str.split(\"e\")\n         if exponent[0] in (\"+\", \"-\"):\n             sign = exponent[0]\n             exponent = exponent[1:]\n",
    "model_name_or_path": "gemini"
  }
]