[
  {
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..cceaeb957f 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or isinstance(val, property)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n",
    "model_name_or_path": "epam-ai-run"
  },
  {
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..0821a7fa4c 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,8 +528,8 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n\n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n+            if (is_public_member(key) and\n+                (inspect.isfunction(val) or isinstance(val, property)) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\ndiff --git a/test_inherit_docstrings.py b/test_inherit_docstrings.py\nnew file mode 100644\nindex 0000000000..72a1ce1e74\n--- /dev/null\n+++ b/test_inherit_docstrings.py\n@@ -0,0 +1,60 @@\n+from astropy.utils.misc import InheritDocstrings\n+\n+# Test case 1: Basic property inheritance\n+class A(metaclass=InheritDocstrings):\n+    @property\n+    def my_property(self):\n+        \"\"\"This is the docstring for my_property\"\"\"\n+        return 42\n+\n+class B(A):\n+    @property\n+    def my_property(self):\n+        return 43\n+\n+print(\"Test 1 - Basic property inheritance:\")\n+print(\"B.my_property.__doc__ =\", B.my_property.__doc__)\n+\n+# Test case 2: Multiple inheritance\n+class C:\n+    @property\n+    def another_prop(self):\n+        \"\"\"C's docstring\"\"\"\n+        return 1\n+\n+class D:\n+    @property\n+    def another_prop(self):\n+        \"\"\"D's docstring\"\"\"\n+        return 2\n+\n+class E(D, C, metaclass=InheritDocstrings):\n+    @property\n+    def another_prop(self):\n+        return 3\n+\n+print(\"\\nTest 2 - Multiple inheritance (should use D's docstring):\")\n+print(\"E.another_prop.__doc__ =\", E.another_prop.__doc__)\n+\n+# Test case 3: Property with setter\n+class F(metaclass=InheritDocstrings):\n+    @property\n+    def with_setter(self):\n+        \"\"\"Property with a setter\"\"\"\n+        return self._value\n+\n+    @with_setter.setter\n+    def with_setter(self, value):\n+        self._value = value\n+\n+class G(F):\n+    @property\n+    def with_setter(self):\n+        return self._value\n+\n+    @with_setter.setter\n+    def with_setter(self, value):\n+        self._value = value * 2\n+\n+print(\"\\nTest 3 - Property with setter:\")\n+print(\"G.with_setter.__doc__ =\", G.with_setter.__doc__)\n\\ No newline at end of file\n",
    "model_name_or_path": "2024-02-03-openhands-4x-scaled"
  },
  {
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex de3fb01d18..5d5ee372b0 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,15 +528,35 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n-                is_public_member(key) and\n-                val.__doc__ is None):\n+            if not is_public_member(key):\n+                continue\n+\n+            # Handle normal functions and properties\n+            if (inspect.isfunction(val) or isinstance(val, property)) and val.__doc__ is None:\n                 for base in cls.__mro__[1:]:\n                     super_method = getattr(base, key, None)\n                     if super_method is not None:\n                         val.__doc__ = super_method.__doc__\n                         break\n \n+            # Handle property setters and deleters\n+            if isinstance(val, property):\n+                # Check if this property overrides a base class property\n+                for base in cls.__mro__[1:]:\n+                    super_prop = getattr(base, key, None)\n+                    if not isinstance(super_prop, property):\n+                        continue\n+\n+                    # Inherit setter docstring if needed\n+                    if val.fset and val.fset.__doc__ is None and super_prop.fset:\n+                        val.fset.__doc__ = super_prop.fset.__doc__\n+\n+                    # Inherit deleter docstring if needed\n+                    if val.fdel and val.fdel.__doc__ is None and super_prop.fdel:\n+                        val.fdel.__doc__ = super_prop.fdel.__doc__\n+\n+                    break\n+\n         super().__init__(name, bases, dct)\n \n \n",
    "model_name_or_path": "epam-ai-run"
  },
  {
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or isinstance(val, property)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n",
    "model_name_or_path": "gemini"
  },
  {
    "instance_id": "astropy__astropy-7166",
    "model_patch": "diff --git a/astropy/utils/misc.py b/astropy/utils/misc.py\nindex 3e98dc4..3b7f480 100644\n--- a/astropy/utils/misc.py\n+++ b/astropy/utils/misc.py\n@@ -528,7 +528,7 @@ class InheritDocstrings(type):\n                 not key.startswith('_'))\n \n         for key, val in dct.items():\n-            if (inspect.isfunction(val) and\n+            if ((inspect.isfunction(val) or isinstance(val, property)) and\n                 is_public_member(key) and\n                 val.__doc__ is None):\n                 for base in cls.__mro__[1:]:\n",
    "model_name_or_path": "agentless"
  }
]