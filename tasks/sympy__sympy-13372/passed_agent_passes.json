[
  {
    "instance_id": "sympy__sympy-13372",
    "model_patch": "diff --git a/sympy/core/evalf.py b/sympy/core/evalf.py\nindex 72a5fbae52..71ab481017 100644\n--- a/sympy/core/evalf.py\n+++ b/sympy/core/evalf.py\n@@ -1237,7 +1237,29 @@ def _create_evalf_table():\n     from sympy.functions.elementary.integers import ceiling, floor\n     from sympy.functions.elementary.piecewise import Piecewise\n     from sympy.functions.elementary.trigonometric import atan, cos, sin\n+    from sympy.functions.elementary.miscellaneous import Max\n     from sympy.integrals.integrals import Integral\n+    def evalf_max(x, prec, options):\n+        # Evaluate each argument and return the maximum\n+        args = x.args\n+        max_val = float('-inf')\n+        max_re = max_im = max_re_acc = max_im_acc = None\n+        \n+        for arg in args:\n+            re, im, re_acc, im_acc = evalf(arg, prec, options)\n+            if im:\n+                # Complex arguments not supported in Max\n+                raise NotImplementedError(\"Complex arguments in Max not supported\")\n+            if re:\n+                val = libmp.to_float(re)\n+                if val > max_val:\n+                    max_val = val\n+                    max_re, max_re_acc = re, re_acc\n+        \n+        if max_re is None:\n+            return None, None, None, None\n+        return max_re, None, max_re_acc, None\n+\n     evalf_table = {\n         Symbol: evalf_symbol,\n         Dummy: evalf_symbol,\n@@ -1278,6 +1300,7 @@ def _create_evalf_table():\n         Piecewise: evalf_piecewise,\n \n         bernoulli: evalf_bernoulli,\n+        Max: evalf_max,\n     }\n \n \n@@ -1295,15 +1318,15 @@ def evalf(x, prec, options):\n             re, im = xe.as_real_imag()\n             if re.has(re_) or im.has(im_):\n                 raise NotImplementedError\n+            # Initialize reprec and imprec to None by default\n+            reprec = imprec = None\n             if re == 0:\n                 re = None\n-                reprec = None\n             elif re.is_number:\n                 re = re._to_mpmath(prec, allow_ints=False)._mpf_\n                 reprec = prec\n             if im == 0:\n                 im = None\n-                imprec = None\n             elif im.is_number:\n                 im = im._to_mpmath(prec, allow_ints=False)._mpf_\n                 imprec = prec\n",
    "model_name_or_path": "devlo"
  }
]