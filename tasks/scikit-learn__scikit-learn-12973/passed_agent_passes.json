[
  {
    "instance_id": "scikit-learn__scikit-learn-12973",
    "model_patch": "diff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 000000000..90334f2e3\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from sklearn.linear_model import LassoLarsIC\n+\n+# Create sample data\n+X = np.array([[1, 1], [0, 0], [1, 1]])\n+y = np.array([-1.1111, 0, -1.1111])\n+\n+# Test 1: Initialize with copy_X=False, use default fit behavior\n+lasso1 = LassoLarsIC(copy_X=False)\n+lasso1.fit(X, y)  # Should use copy_X=False from initialization\n+print(\"Test 1: Using initialization value (copy_X=False)\")\n+\n+# Test 2: Initialize with copy_X=False, explicitly override in fit\n+lasso2 = LassoLarsIC(copy_X=False)\n+lasso2.fit(X, y, copy_X=True)  # Should override to copy_X=True\n+print(\"Test 2: Explicitly overriding with copy_X=True in fit\")\n+\n+# Test 3: Initialize with copy_X=True (default), use default fit behavior\n+lasso3 = LassoLarsIC()\n+lasso3.fit(X, y)  # Should use default copy_X=True\n+print(\"Test 3: Using default initialization value (copy_X=True)\")\n+\n+print(\"\\nAll tests completed successfully - copy_X parameter behavior is now consistent\")\n\\ No newline at end of file\ndiff --git a/sklearn/linear_model/least_angle.py b/sklearn/linear_model/least_angle.py\nindex 03b34a0dc..7df89c3b5 100644\n--- a/sklearn/linear_model/least_angle.py\n+++ b/sklearn/linear_model/least_angle.py\n@@ -1479,7 +1479,7 @@ class LassoLarsIC(LassoLars):\n         self.eps = eps\n         self.fit_path = True\n \n-    def fit(self, X, y, copy_X=True):\n+    def fit(self, X, y, copy_X=None):\n         \"\"\"Fit the model using X, y as training data.\n \n         Parameters\n@@ -1490,8 +1490,9 @@ class LassoLarsIC(LassoLars):\n         y : array-like, shape (n_samples,)\n             target values. Will be cast to X's dtype if necessary\n \n-        copy_X : boolean, optional, default True\n+        copy_X : boolean, optional, default None\n             If ``True``, X will be copied; else, it may be overwritten.\n+            If None, the value of copy_X provided in the constructor is used.\n \n         Returns\n         -------\n@@ -1500,14 +1501,17 @@ class LassoLarsIC(LassoLars):\n         \"\"\"\n         X, y = check_X_y(X, y, y_numeric=True)\n \n+        # Use instance's copy_X if copy_X is None, otherwise use the provided value\n+        effective_copy_X = self.copy_X if copy_X is None else copy_X\n+\n         X, y, Xmean, ymean, Xstd = LinearModel._preprocess_data(\n-            X, y, self.fit_intercept, self.normalize, self.copy_X)\n+            X, y, self.fit_intercept, self.normalize, effective_copy_X)\n         max_iter = self.max_iter\n \n         Gram = self.precompute\n \n         alphas_, active_, coef_path_, self.n_iter_ = lars_path(\n-            X, y, Gram=Gram, copy_X=copy_X, copy_Gram=True, alpha_min=0.0,\n+            X, y, Gram=Gram, copy_X=effective_copy_X, copy_Gram=True, alpha_min=0.0,\n             method='lasso', verbose=self.verbose, max_iter=max_iter,\n             eps=self.eps, return_n_iter=True, positive=self.positive)\n \n",
    "model_name_or_path": "codestory-midwit"
  }
]