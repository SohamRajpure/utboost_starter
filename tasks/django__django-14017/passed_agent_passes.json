[
  {
    "instance_id": "django__django-14017",
    "model_patch": "diff --git a/django/db/models/query_utils.py b/django/db/models/query_utils.py\nindex c957ffa564..b3d0858e42 100644\n--- a/django/db/models/query_utils.py\n+++ b/django/db/models/query_utils.py\n@@ -40,23 +40,28 @@ class Q(tree.Node):\n         super().__init__(children=[*args, *sorted(kwargs.items())], connector=_connector, negated=_negated)\n \n     def _combine(self, other, conn):\n+        # Accept Q or any conditional expression.\n         if not isinstance(other, Q):\n-            raise TypeError(other)\n-\n-        # If the other Q() is empty, ignore it and just use `self`.\n+            if getattr(other, 'conditional', False):\n+                other = Q(other)\n+            else:\n+                raise TypeError(other)\n+    \n+        # If the other Q() is empty, ignore it and just use self.\n         if not other:\n             _, args, kwargs = self.deconstruct()\n             return type(self)(*args, **kwargs)\n-        # Or if this Q is empty, ignore it and just use `other`.\n+        # Or if this Q is empty, ignore it and just use other.\n         elif not self:\n             _, args, kwargs = other.deconstruct()\n             return type(other)(*args, **kwargs)\n-\n+    \n         obj = type(self)()\n         obj.connector = conn\n         obj.add(self, conn)\n         obj.add(other, conn)\n         return obj\n+    \n \n     def __or__(self, other):\n         return self._combine(other, self.OR)\n@@ -87,7 +92,12 @@ class Q(tree.Node):\n         args, kwargs = (), {}\n         if len(self.children) == 1 and not isinstance(self.children[0], Q):\n             child = self.children[0]\n-            kwargs = {child[0]: child[1]}\n+            # If 'child' is a 2-tuple, treat it as a (key, value) filter.\n+            if isinstance(child, tuple) and len(child) == 2:\n+                kwargs = {child[0]: child[1]}\n+            else:\n+                # Otherwise, treat it as a single positional argument.\n+                args = (child,)\n         else:\n             args = tuple(self.children)\n             if self.connector != self.default:\n@@ -95,6 +105,7 @@ class Q(tree.Node):\n         if self.negated:\n             kwargs['_negated'] = True\n         return path, args, kwargs\n+    \n \n \n class DeferredAttribute:\ndiff --git a/test_q_exists_bug.py b/test_q_exists_bug.py\nnew file mode 100644\nindex 0000000000..7b194404af\n--- /dev/null\n+++ b/test_q_exists_bug.py\n@@ -0,0 +1,69 @@\n+import sys\n+import traceback\n+import django\n+from django.conf import settings\n+from django.db import connection, models\n+from django.db.models import Q, Exists, OuterRef\n+\n+\"\"\"\n+This script reproduces the Q & Exists TypeError bug.\n+\n+On HEAD (unfixed):\n+- Q() & Exists(...) raises TypeError\n+- So the script should exit with status 1.\n+\n+After the fix:\n+- Q() & Exists(...) should succeed\n+- The script should exit with status 0.\n+\"\"\"\n+\n+# Minimal setup\n+settings.configure(\n+    SECRET_KEY=\"test\",\n+    DEBUG=True,\n+    INSTALLED_APPS=[\n+        \"django.contrib.contenttypes\",\n+        \"__main__\",  # so we can define models here\n+    ],\n+    DATABASES={\n+        \"default\": {\n+            \"ENGINE\": \"django.db.backends.sqlite3\",\n+            \"NAME\": \":memory:\"\n+        }\n+    },\n+)\n+django.setup()\n+\n+class Product(models.Model):\n+    name = models.CharField(max_length=50)\n+\n+# Migrate\n+with connection.schema_editor() as editor:\n+    editor.create_model(Product)\n+\n+def main():\n+    try:\n+        # Create a dummy query\n+        Product.objects.create(name=\"Thing\")\n+        subquery = Product.objects.filter(name=\"Thing\")\n+        expr = Exists(subquery)\n+        \n+        # The known problematic operation:\n+        # This line must NOT raise TypeError after the fix.\n+        combined = Q() & expr\n+\n+        # If we succeed here, that means the fix worked.\n+        print(\"SUCCESS: Q() & Exists(...) did not raise TypeError.\")\n+        sys.exit(0)\n+        \n+    except TypeError as e:\n+        print(\"FAIL: Q() & Exists(...) caused TypeError.\")\n+        traceback.print_exc()\n+        sys.exit(1)\n+    except Exception as ex:\n+        print(\"An unexpected exception occurred:\", ex)\n+        traceback.print_exc()\n+        sys.exit(1)\n+\n+if __name__ == \"__main__\":\n+    main()\n",
    "model_name_or_path": "readytogo-crosschecked"
  }
]