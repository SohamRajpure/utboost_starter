[
  {
    "instance_id": "django__django-12143",
    "model_patch": "diff --git a/PR_EXPLANATION.md b/PR_EXPLANATION.md\nnew file mode 100644\nindex 0000000000..d005b0852a\n--- /dev/null\n+++ b/PR_EXPLANATION.md\n@@ -0,0 +1,41 @@\n+# Fix for Potential Data Loss in Admin Changeform View with Regex Special Characters in Formset Prefix\n+\n+## Issue Description\n+\n+There was a potential data loss issue in the admin interface when formset prefixes contain regex special characters (like `[`, `]`, `.`, `*`, `+`, etc.). The issue was in the `_get_edited_object_pks` method in `django/contrib/admin/options.py`, where a regex pattern was being created using string formatting without escaping the input parameters:\n+\n+```python\n+pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+```\n+\n+This could cause the pattern to be invalid or not match as expected when the prefix contained regex special characters, potentially leading to data loss because the admin would not be able to identify which objects were being edited.\n+\n+## Changes Made\n+\n+1. Fixed the issue by modifying the method to use `re.escape()` on both parameters:\n+\n+```python\n+pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))\n+```\n+\n+2. Added a new test case in `tests/admin_changelist/tests.py` that specifically tests this scenario with a prefix containing regex special characters:\n+\n+```python\n+def test_get_edited_object_ids_with_regex_special_chars_in_prefix(self):\n+    # Creates a test with a prefix containing regex special characters: 'form[.*+?]'\n+    # ...\n+```\n+\n+3. Created a demonstration script (`reproduce_issue.py`) that shows the issue and how the fix resolves it.\n+\n+## Testing\n+\n+- Added a specific test for this issue that passes with the fix\n+- Verified that all existing tests still pass, including admin_changelist, admin_views, admin_inlines, and admin_widgets tests\n+- Created a demonstration script that shows the practical impact of the issue and how the fix resolves it\n+\n+## Impact\n+\n+The changes are minimal and focused on fixing just this specific issue. This fix prevents potential data loss that could occur when users customize formset prefixes with characters that have special meaning in regular expressions.\n+\n+This bug was introduced in commit b18650a2634890aa758abae2f33875daa13a9ba3 and is now fixed.\ndiff --git a/django/contrib/admin/options.py b/django/contrib/admin/options.py\nindex 137e6faa0f..effc5e9296 100644\n--- a/django/contrib/admin/options.py\n+++ b/django/contrib/admin/options.py\n@@ -1631,7 +1631,7 @@ class ModelAdmin(BaseModelAdmin):\n \n     def _get_edited_object_pks(self, request, prefix):\n         \"\"\"Return POST data values of list_editable primary keys.\"\"\"\n-        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))\n         return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n \n     def _get_list_editable_queryset(self, request, prefix):\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..9a3c99ab58\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,105 @@\n+#!/usr/bin/env python\n+\"\"\"\n+This script demonstrates the issue where using a formset prefix with regex special\n+characters would cause data loss in the admin changeform view when processing the\n+form data.\n+\n+The issue occurs in the _get_edited_object_pks method in django/contrib/admin/options.py\n+where a regex pattern is created using string formatting without escaping the\n+formset prefix, which could contain regex special characters.\n+\"\"\"\n+\n+import os\n+import re\n+import sys\n+\n+# Set up Django environment\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tests.test_sqlite')\n+sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))\n+\n+import django\n+from django.contrib.admin.options import ModelAdmin\n+from django.http import HttpRequest\n+from django.db import models\n+\n+\n+def main():\n+    django.setup()\n+    \n+    # Create a simple model for testing\n+    class SimpleModel(models.Model):\n+        name = models.CharField(max_length=100)\n+        \n+        class Meta:\n+            app_label = 'reproduce_issue'\n+            \n+    # Create a model admin for the model\n+    class SimpleModelAdmin(ModelAdmin):\n+        model = SimpleModel\n+    \n+    # Create a simulated POST request with data using a special prefix\n+    request = HttpRequest()\n+    # Use a prefix with regex special characters\n+    prefix = 'form[.*+?]'\n+    \n+    # Simulated form data for three objects with IDs 1, 2, and 3\n+    request.POST = {\n+        f'{prefix}-TOTAL_FORMS': '3',\n+        f'{prefix}-INITIAL_FORMS': '3',\n+        f'{prefix}-0-id': '1',\n+        f'{prefix}-1-id': '2',\n+        f'{prefix}-2-id': '3',\n+        f'{prefix}-0-name': 'Object 1',\n+        f'{prefix}-1-name': 'Object 2',\n+        f'{prefix}-2-name': 'Object 3',\n+    }\n+    \n+    # Create admin instance\n+    admin = SimpleModelAdmin(SimpleModel, None)\n+    \n+    print(\"Demonstrating the issue and fix for the Django admin regex formset prefix bug\")\n+    print(\"---------------------------------------------------------------------------\")\n+    \n+    # Version with bug (without using re.escape)\n+    def buggy_get_edited_object_pks(self, request, prefix):\n+        \"\"\"Original implementation with the bug.\"\"\"\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(prefix, self.model._meta.pk.name))\n+        return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n+    \n+    # Fixed version (using re.escape)\n+    def fixed_get_edited_object_pks(self, request, prefix):\n+        \"\"\"Fixed implementation using re.escape.\"\"\"\n+        pk_pattern = re.compile(r'{}-\\d+-{}$'.format(re.escape(prefix), re.escape(self.model._meta.pk.name)))\n+        return [value for key, value in request.POST.items() if pk_pattern.match(key)]\n+    \n+    # Patch methods temporarily\n+    original_method = ModelAdmin._get_edited_object_pks\n+    \n+    try:\n+        # Test with buggy version\n+        print(f\"Using prefix with regex special characters: '{prefix}'\")\n+        print(\"\\nBuggy implementation (without re.escape):\")\n+        ModelAdmin._get_edited_object_pks = buggy_get_edited_object_pks\n+        try:\n+            pks = admin._get_edited_object_pks(request, prefix)\n+            print(f\"Retrieved PKs: {pks}\")\n+        except Exception as e:\n+            print(f\"Error: {e}\")\n+        \n+        # Test with fixed version\n+        print(\"\\nFixed implementation (with re.escape):\")\n+        ModelAdmin._get_edited_object_pks = fixed_get_edited_object_pks\n+        pks = admin._get_edited_object_pks(request, prefix)\n+        print(f\"Retrieved PKs: {pks}\")\n+    finally:\n+        # Restore original method\n+        ModelAdmin._get_edited_object_pks = original_method\n+    \n+    print(\"\\nConclusion:\")\n+    print(\"The buggy implementation fails to properly handle formset prefixes with regex special characters,\")\n+    print(\"which could lead to data loss when processing forms in the admin interface.\")\n+    print(\"The fixed implementation uses re.escape() to properly handle any characters in the prefix.\")\n+\n+\n+if __name__ == \"__main__\":\n+    main()\ndiff --git a/tests/admin_changelist/tests.py b/tests/admin_changelist/tests.py\nindex 05490b061a..e22ce003ff 100644\n--- a/tests/admin_changelist/tests.py\n+++ b/tests/admin_changelist/tests.py\n@@ -818,6 +818,36 @@ class ChangeListTests(TestCase):\n         request = self.factory.post(changelist_url, data=data)\n         pks = m._get_edited_object_pks(request, prefix='form')\n         self.assertEqual(sorted(pks), sorted([str(a.pk), str(b.pk), str(c.pk)]))\n+        \n+    def test_get_edited_object_ids_with_regex_special_chars_in_prefix(self):\n+        a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n+        b = Swallow.objects.create(origin='Swallow B', load=2, speed=2)\n+        c = Swallow.objects.create(origin='Swallow C', load=5, speed=5)\n+        superuser = self._create_superuser('superuser')\n+        self.client.force_login(superuser)\n+        changelist_url = reverse('admin:admin_changelist_swallow_changelist')\n+        m = SwallowAdmin(Swallow, custom_site)\n+        # Use a prefix with regex special characters\n+        prefix = 'form[.*+?]'\n+        data = {\n+            f'{prefix}-TOTAL_FORMS': '3',\n+            f'{prefix}-INITIAL_FORMS': '3',\n+            f'{prefix}-MIN_NUM_FORMS': '0',\n+            f'{prefix}-MAX_NUM_FORMS': '1000',\n+            f'{prefix}-0-uuid': str(a.pk),\n+            f'{prefix}-1-uuid': str(b.pk),\n+            f'{prefix}-2-uuid': str(c.pk),\n+            f'{prefix}-0-load': '9.0',\n+            f'{prefix}-0-speed': '9.0',\n+            f'{prefix}-1-load': '5.0',\n+            f'{prefix}-1-speed': '5.0',\n+            f'{prefix}-2-load': '5.0',\n+            f'{prefix}-2-speed': '4.0',\n+            '_save': 'Save',\n+        }\n+        request = self.factory.post(changelist_url, data=data)\n+        pks = m._get_edited_object_pks(request, prefix=prefix)\n+        self.assertEqual(sorted(pks), sorted([str(a.pk), str(b.pk), str(c.pk)]))\n \n     def test_get_list_editable_queryset(self):\n         a = Swallow.objects.create(origin='Swallow A', load=4, speed=1)\n",
    "model_name_or_path": "claude-sonnet-3.7"
  }
]