[
  {
    "instance_id": "django__django-14672",
    "model_patch": "diff --git a/django/db/models/fields/reverse_related.py b/django/db/models/fields/reverse_related.py\nindex ccc2223a5f..65950590e2 100644\n--- a/django/db/models/fields/reverse_related.py\n+++ b/django/db/models/fields/reverse_related.py\n@@ -310,7 +310,7 @@ class ManyToManyRel(ForeignObjectRel):\n     def identity(self):\n         return super().identity + (\n             self.through,\n-            self.through_fields,\n+            make_hashable(self.through_fields),\n             self.db_constraint,\n         )\n \ndiff --git a/test_settings.py b/test_settings.py\nnew file mode 100644\nindex 0000000000..579e6a93c3\n--- /dev/null\n+++ b/test_settings.py\n@@ -0,0 +1,15 @@\n+\n+# Django test settings\n+SECRET_KEY = 'test-key'\n+INSTALLED_APPS = [\n+    'django.contrib.auth',\n+    'django.contrib.contenttypes',\n+    'django.contrib.sessions',\n+    'django.contrib.admin',\n+]\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': ':memory:',\n+    }\n+}\ndiff --git a/test_through_fields.py b/test_through_fields.py\nnew file mode 100644\nindex 0000000000..0f338193c5\n--- /dev/null\n+++ b/test_through_fields.py\n@@ -0,0 +1,40 @@\n+\n+from django.db import models\n+from django.test import TestCase\n+\n+\n+class Parent(models.Model):\n+    name = models.CharField(max_length=256)\n+\n+\n+class ProxyParent(Parent):\n+    class Meta:\n+        proxy = True\n+\n+\n+class Child(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+    many_to_many_field = models.ManyToManyField(\n+        to=Parent,\n+        through=\"ManyToManyModel\",\n+        through_fields=['child', 'parent'],\n+        related_name=\"something\"\n+    )\n+\n+\n+class ManyToManyModel(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+\n+class ManyToManyThroughFieldsTest(TestCase):\n+    def test_model_check_with_list_through_fields(self):\n+        \"\"\"\n+        Test that we can use a list for through_fields in a ManyToManyField.\n+        This test should pass after fixing the bug by applying make_hashable to through_fields.\n+        \"\"\"\n+        # This will implicitly call model system checks during test setUp\n+        # If the fix is working, this test will pass without raising a TypeError\n+        # The error would be: TypeError: unhashable type: 'list'\n+        pass\ndiff --git a/tests/m2m_through_regress/test_through_fields_list.py b/tests/m2m_through_regress/test_through_fields_list.py\nnew file mode 100644\nindex 0000000000..1232fbf082\n--- /dev/null\n+++ b/tests/m2m_through_regress/test_through_fields_list.py\n@@ -0,0 +1,56 @@\n+\n+from django.core import checks\n+from django.db import models\n+from django.test import SimpleTestCase\n+\n+\n+# Models to reproduce the issue with through_fields as a list\n+class Parent(models.Model):\n+    name = models.CharField(max_length=256)\n+\n+\n+class ProxyParent(Parent):\n+    class Meta:\n+        proxy = True\n+\n+\n+class Child(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE)\n+    # Note: through_fields is a list here, which caused the unhashable type error\n+    many_to_many_field = models.ManyToManyField(\n+        to=Parent,\n+        through=\"ManyToManyModel\",\n+        through_fields=['child', 'parent'],\n+        related_name=\"something\"\n+    )\n+\n+\n+class ManyToManyModel(models.Model):\n+    parent = models.ForeignKey(Parent, on_delete=models.CASCADE, related_name='+')\n+    child = models.ForeignKey(Child, on_delete=models.CASCADE, related_name='+')\n+    second_child = models.ForeignKey(Child, on_delete=models.CASCADE, null=True, default=None)\n+\n+\n+class ThroughFieldsListTest(SimpleTestCase):\n+    def test_list_through_fields(self):\n+        \"\"\"\n+        Test that through_fields can be specified as a list without raising a TypeError.\n+        \n+        This tests the fix for the issue where a list in through_fields would cause\n+        an unhashable type error when computing the hash of a ManyToManyRel.\n+        \"\"\"\n+        # Running model system checks would previously raise:\n+        # TypeError: unhashable type: 'list'\n+        # The error occurred in __hash__ when trying to hash the identity tuple in _check_field_name_clashes\n+        \n+        # The field name clashes check actually calls hash on the fields\n+        errors = Child._check_field_name_clashes()\n+        self.assertEqual(errors, [])\n+        \n+        # Also test with ProxyParent as it was mentioned in the issue description\n+        errors = ProxyParent._check_field_name_clashes()\n+        self.assertEqual(errors, [])\n+        \n+        # Run full model checks to ensure everything works properly\n+        all_errors = checks.run_checks(app_configs=None)\n+        self.assertEqual(all_errors, [])\n",
    "model_name_or_path": "claude-sonnet-3.7"
  }
]