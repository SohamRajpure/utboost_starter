[
  {
    "instance_id": "astropy__astropy-14598",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex aad550ae53..431d0e0db9 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -89,3 +89,6 @@ pip-wheel-metadata\n \n # Files generated if figure tests are run\n results\n+*__pycache__*\n+*venv*\n+*_build*\ndiff --git a/astropy/io/fits/card.py b/astropy/io/fits/card.py\nindex 1b3285ddce..cecfd4e068 100644\n--- a/astropy/io/fits/card.py\n+++ b/astropy/io/fits/card.py\n@@ -64,7 +64,7 @@ class Card(_Verify):\n \n     # Used in cards using the CONTINUE convention which expect a string\n     # followed by an optional comment\n-    _strg = r\"\\'(?P<strg>([ -~]+?|\\'\\'|) *?)\\'(?=$|/| )\"\n+    _strg = r\"\\'(?P<strg>([^']+|\\'\\')*)\\'(?=$|/| )\"\n     _comm_field = r\"(?P<comm_field>(?P<sepr>/ *)(?P<comm>(.|\\n)*))\"\n     _strg_comment_RE = re.compile(f\"({_strg})? *{_comm_field}?\")\n \n@@ -768,7 +768,7 @@ class Card(_Verify):\n         if m.group(\"bool\") is not None:\n             value = m.group(\"bool\") == \"T\"\n         elif m.group(\"strg\") is not None:\n-            value = re.sub(\"''\", \"'\", m.group(\"strg\"))\n+            value = m.group(\"strg\").replace(\"''\", \"'\")\n         elif m.group(\"numr\") is not None:\n             #  Check for numbers with leading 0s.\n             numr = self._number_NFSC_RE.match(m.group(\"numr\"))\n@@ -859,7 +859,7 @@ class Card(_Verify):\n                     return kw, vc\n \n                 value = m.group(\"strg\") or \"\"\n-                value = value.rstrip().replace(\"''\", \"'\")\n+                value = value.rstrip()\n                 if value and value[-1] == \"&\":\n                     value = value[:-1]\n                 values.append(value)\ndiff --git a/reproduce_issue.py b/reproduce_issue.py\nnew file mode 100644\nindex 0000000000..585aafd3f9\n--- /dev/null\n+++ b/reproduce_issue.py\n@@ -0,0 +1,23 @@\n+import sys\n+sys.path.insert(0, '/testbed')\n+from astropy.io import fits\n+\n+def test_case(n, value):\n+    card1 = fits.Card('CONFIG', value)\n+    card2 = fits.Card.fromstring(str(card1))\n+    equal = card1.value == card2.value\n+    print(f\"n={n}, len={len(value)}, equal={equal}\")\n+    if not equal:\n+        print(f\"card1: {repr(card1.value)}\")\n+        print(f\"card2: {repr(card2.value)}\")\n+    return equal\n+\n+print(\"Test case 1: Double single quotes at end\")\n+print(\"-\" * 50)\n+for n in range(60, 70):\n+    test_case(n, \"x\" * n + \"''\")\n+\n+print(\"\\nTest case 2: Double single quotes in middle\")\n+print(\"-\" * 50)\n+for n in range(50, 70):\n+    test_case(n, \"x\" * n + \"''\" + \"x\" * 10)\n\\ No newline at end of file\n",
    "model_name_or_path": "emergent-e1-241223"
  }
]