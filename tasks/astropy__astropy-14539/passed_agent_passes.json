[
  {
    "instance_id": "astropy__astropy-14539",
    "model_patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..5a53f8cfc6 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1449,7 +1449,7 @@ class TableDataDiff(_BaseDiff):\n                 arrb.dtype, np.floating\n             ):\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n+            elif \"P\" in col.format or \"Q\" in col.format:  # Handle both P and Q variable-length arrays\n                 diffs = (\n                     [\n                         idx\n",
    "model_name_or_path": "agentscope-swe"
  },
  {
    "instance_id": "astropy__astropy-14539",
    "model_patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..33618f63c6 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1445,22 +1445,55 @@ class TableDataDiff(_BaseDiff):\n             arra = self.a[col.name]\n             arrb = self.b[col.name]\n\n-            if np.issubdtype(arra.dtype, np.floating) and np.issubdtype(\n-                arrb.dtype, np.floating\n-            ):\n-                diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n-                diffs = (\n-                    [\n-                        idx\n-                        for idx in range(len(arra))\n-                        if not np.allclose(\n-                            arra[idx], arrb[idx], rtol=self.rtol, atol=self.atol\n-                        )\n-                    ],\n-                )\n-            else:\n-                diffs = np.where(arra != arrb)\n+            # Handle all cases uniformly\n+            diffs = []\n+            for idx in range(len(arra)):\n+                try:\n+                    a_val = arra[idx]\n+                    b_val = arrb[idx]\n+\n+                    # Convert to numpy arrays for comparison\n+                    if \"P\" in col.format:\n+                        a_val = np.asarray(a_val)\n+                        b_val = np.asarray(b_val)\n+                        if a_val.shape != b_val.shape:\n+                            continue  # Skip arrays with different shapes\n+\n+                    # Use allclose for all numeric types\n+                    if np.issubdtype(type(a_val), np.number) or isinstance(a_val, np.ndarray):\n+                        # Special handling for NaN values\n+                        if isinstance(a_val, np.ndarray):\n+                            a_nan = np.isnan(a_val)\n+                            b_nan = np.isnan(b_val)\n+                            # If NaN patterns don't match, values are different\n+                            if not np.array_equal(a_nan, b_nan):\n+                                diffs.append(idx)\n+                                continue\n+                            # Compare non-NaN values with allclose\n+                            if not np.all(a_nan):  # If there are any non-NaN values\n+                                if not np.allclose(\n+                                    a_val[~a_nan], b_val[~b_nan],\n+                                    rtol=self.rtol, atol=self.atol\n+                                ):\n+                                    diffs.append(idx)\n+                        else:\n+                            # For scalar values\n+                            a_nan = np.isnan(a_val)\n+                            b_nan = np.isnan(b_val)\n+                            if a_nan != b_nan:\n+                                diffs.append(idx)\n+                            elif not a_nan and not np.allclose(\n+                                a_val, b_val, rtol=self.rtol, atol=self.atol\n+                            ):\n+                                diffs.append(idx)\n+                    else:\n+                        # For non-numeric types use direct comparison\n+                        if a_val != b_val:\n+                            diffs.append(idx)\n+                except (ValueError, TypeError):\n+                    # Skip any values that can't be compared\n+                    continue\n+            diffs = (diffs,)\n\n             self.diff_total += len(set(diffs[0]))\n",
    "model_name_or_path": "2024-02-03-openhands-4x-scaled"
  },
  {
    "instance_id": "astropy__astropy-14539",
    "model_patch": "diff --git a/astropy/io/fits/diff.py b/astropy/io/fits/diff.py\nindex 100cdf1b8c..abd4b06ffb 100644\n--- a/astropy/io/fits/diff.py\n+++ b/astropy/io/fits/diff.py\n@@ -1449,7 +1449,7 @@ class TableDataDiff(_BaseDiff):\n                 arrb.dtype, np.floating\n             ):\n                 diffs = where_not_allclose(arra, arrb, rtol=self.rtol, atol=self.atol)\n-            elif \"P\" in col.format:\n+            elif \"P\" in col.format or \"Q\" in col.format:  # Handle both P and Q variable-length arrays\n                 diffs = (\n                     [\n                         idx\n@@ -1575,3 +1575,4 @@ def report_diff_keyword_attr(fileobj, attr, diffs, keyword, ind=0):\n                 )\n             )\n             report_diff_values(val[0], val[1], fileobj=fileobj, indent_width=ind + 1)\n+\n",
    "model_name_or_path": "aws"
  }
]