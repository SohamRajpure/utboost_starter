[
  {
    "instance_id": "sympy__sympy-15809",
    "model_patch": "diff --git a/sympy/functions/elementary/miscellaneous.py b/sympy/functions/elementary/miscellaneous.py\nindex 5f9fe73c5c..3ea7b642f0 100644\n--- a/sympy/functions/elementary/miscellaneous.py\n+++ b/sympy/functions/elementary/miscellaneous.py\n@@ -340,7 +340,9 @@ def real_root(arg, n=None, evaluate=None):\n class MinMaxBase(Expr, LatticeOp):\n     def __new__(cls, *args, **assumptions):\n         if not args:\n-            raise ValueError(\"The Max/Min functions must have arguments.\")\n+            if cls.__name__ == 'Min':\n+                return S.Infinity\n+            return S.NegativeInfinity\n \n         args = (sympify(arg) for arg in args)\n \ndiff --git a/test_minmax.py b/test_minmax.py\nnew file mode 100644\nindex 0000000000..59a1b05c60\n--- /dev/null\n+++ b/test_minmax.py\n@@ -0,0 +1,13 @@\n+from sympy import Min, Max, oo\n+\n+try:\n+    result = Min()\n+    print(\"Min() =\", result)\n+except ValueError as e:\n+    print(\"Min() error:\", e)\n+\n+try:\n+    result = Max()\n+    print(\"Max() =\", result)\n+except ValueError as e:\n+    print(\"Max() error:\", e)\n\\ No newline at end of file\ndiff --git a/test_minmax_edge.py b/test_minmax_edge.py\nnew file mode 100644\nindex 0000000000..12e3a12db5\n--- /dev/null\n+++ b/test_minmax_edge.py\n@@ -0,0 +1,25 @@\n+from sympy import Min, Max, oo, S, Symbol\n+\n+# Test empty args\n+print(\"Empty args:\")\n+print(\"Min() =\", Min())\n+print(\"Max() =\", Max())\n+\n+# Test normal cases still work\n+x = Symbol('x')\n+y = Symbol('y')\n+print(\"\\nNormal cases:\")\n+print(\"Min(1, 2) =\", Min(1, 2))\n+print(\"Max(1, 2) =\", Max(1, 2))\n+print(\"Min(x, y) =\", Min(x, y))\n+print(\"Max(x, y) =\", Max(x, y))\n+\n+# Test with infinity\n+print(\"\\nInfinity cases:\")\n+print(\"Min(oo, 1) =\", Min(oo, 1))\n+print(\"Max(-oo, 1) =\", Max(-oo, 1))\n+\n+# Ensure original identity cases work\n+print(\"\\nIdentity cases:\")\n+print(\"Min(3) =\", Min(3))\n+print(\"Max(3) =\", Max(3))\n\\ No newline at end of file\n",
    "model_name_or_path": "enginelabs"
  }
]