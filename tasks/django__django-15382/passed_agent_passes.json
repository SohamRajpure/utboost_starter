[
  {
    "instance_id": "django__django-15382",
    "model_patch": "diff --git a/django/db/models/expressions.py b/django/db/models/expressions.py\nindex 81f8f79c71..8d0f82e882 100644\n--- a/django/db/models/expressions.py\n+++ b/django/db/models/expressions.py\n@@ -1210,17 +1210,25 @@ class Exists(Subquery):\n         return clone\n \n     def as_sql(self, compiler, connection, template=None, **extra_context):\n-        query = self.query.exists(using=connection.alias)\n-        sql, params = super().as_sql(\n-            compiler,\n-            connection,\n-            template=template,\n-            query=query,\n-            **extra_context,\n-        )\n-        if self.negated:\n-            sql = 'NOT {}'.format(sql)\n-        return sql, params\n+        try:\n+            query = self.query.exists(using=connection.alias)\n+            sql, params = super().as_sql(\n+                compiler,\n+                connection,\n+                template=template,\n+                query=query,\n+                **extra_context,\n+            )\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, params\n+        except EmptyResultSet:\n+            # For empty querysets, create a subquery that is always false\n+            template = template or self.template\n+            sql = template % {'subquery': 'SELECT 1 WHERE 1 = 0'}\n+            if self.negated:\n+                sql = 'NOT {}'.format(sql)\n+            return sql, []\n \n     def select_format(self, compiler, sql, params):\n         # Wrap EXISTS() with a CASE WHEN expression if a database backend\ndiff --git a/test_exists.py b/test_exists.py\nnew file mode 100644\nindex 0000000000..22b07c1c58\n--- /dev/null\n+++ b/test_exists.py\n@@ -0,0 +1,60 @@\n+import django\n+from django.conf import settings\n+\n+# Configure Django first\n+settings.configure(\n+    DEBUG=True,\n+    DATABASES={\n+        'default': {\n+            'ENGINE': 'django.db.backends.sqlite3',\n+            'NAME': ':memory:',\n+        }\n+    },\n+    INSTALLED_APPS=['django.contrib.contenttypes', 'django.contrib.auth']\n+)\n+django.setup()\n+\n+# Now import rest\n+from django.test import TestCase\n+from django.db import models\n+\n+class MyModel(models.Model):\n+    name = models.CharField(max_length=100)\n+\n+    class Meta:\n+        app_label = 'testapp'\n+        managed = False  # No need to create actual DB table\n+\n+class TestExistsWithEmpty(TestCase):\n+    def test_exists_empty(self):\n+        # Test EXISTS with empty queryset \n+        qs = MyModel.objects.filter(models.Exists(MyModel.objects.none()))\n+        sql = str(qs.query)\n+        print(\"EXISTS with empty:\")\n+        print(sql)\n+        assert 'EXISTS' in sql, \"EXISTS clause missing\"\n+        assert '1 = 0' in sql, \"Empty condition not handled properly\"\n+\n+        # Test NOT EXISTS with empty queryset\n+        qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()))\n+        sql = str(qs.query)\n+        print(\"\\nNOT EXISTS with empty:\")\n+        print(sql)\n+        assert 'NOT EXISTS' in sql or 'NOT (EXISTS' in sql, \"NOT EXISTS clause missing\"\n+        assert '1 = 0' in sql, \"Empty condition not handled properly\"\n+\n+        # Test with additional conditions\n+        qs = MyModel.objects.filter(~models.Exists(MyModel.objects.none()), name='test')\n+        sql = str(qs.query)\n+        print(\"\\nNOT EXISTS with empty + name condition:\")\n+        print(sql)\n+        assert 'name' in sql.lower(), \"Additional condition missing\"\n+        assert ('NOT EXISTS' in sql or 'NOT (EXISTS' in sql), \"NOT EXISTS clause missing\"\n+        assert '1 = 0' in sql, \"Empty condition not handled properly\"\n+\n+if __name__ == '__main__':\n+    # Run the test\n+    case = TestExistsWithEmpty()\n+    case._pre_setup()\n+    case.test_exists_empty()\n+    print(\"\\nAll tests passed!\")\n\\ No newline at end of file\n",
    "model_name_or_path": "enginelabs"
  }
]