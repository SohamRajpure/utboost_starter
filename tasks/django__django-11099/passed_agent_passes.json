[
  {
    "instance_id": "django__django-11099",
    "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..dd15050813 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,9 +17,10 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\n     )\n     flags = 0\n+\n",
    "model_name_or_path": "20241209_babelcloud_gru"
  },
  {
    "instance_id": "django__django-11099",
    "model_patch": "diff --git a/django/contrib/auth/validators.py b/django/contrib/auth/validators.py\nindex b4878cfd45..1304f20a60 100644\n--- a/django/contrib/auth/validators.py\n+++ b/django/contrib/auth/validators.py\n@@ -7,7 +7,7 @@ from django.utils.translation import gettext_lazy as _\n \n @deconstructible\n class ASCIIUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only English letters, '\n         'numbers, and @/./+/-/_ characters.'\n@@ -17,7 +17,7 @@ class ASCIIUsernameValidator(validators.RegexValidator):\n \n @deconstructible\n class UnicodeUsernameValidator(validators.RegexValidator):\n-    regex = r'^[\\w.@+-]+$'\n+    regex = r'\\A[\\w.@+-]+\\Z'\n     message = _(\n         'Enter a valid username. This value may contain only letters, '\n         'numbers, and @/./+/-/_ characters.'\ndiff --git a/reproduce_username_newline.py b/reproduce_username_newline.py\nnew file mode 100644\nindex 0000000000..64fefcbb21\n--- /dev/null\n+++ b/reproduce_username_newline.py\n@@ -0,0 +1,34 @@\n+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\n+\n+def test_username_with_newline():\n+    ascii_validator = ASCIIUsernameValidator()\n+    unicode_validator = UnicodeUsernameValidator()\n+    \n+    # Test valid username\n+    try:\n+        ascii_validator('testuser')\n+        print(\"\u2713 ASCII validator accepts valid username\")\n+    except:\n+        print(\"\u2717 ASCII validator rejected valid username\")\n+        \n+    try:\n+        unicode_validator('testuser')\n+        print(\"\u2713 Unicode validator accepts valid username\")\n+    except:\n+        print(\"\u2717 Unicode validator rejected valid username\")\n+    \n+    # Test username with trailing newline\n+    try:\n+        ascii_validator('testuser\\n')\n+        print(\"\u2717 ASCII validator incorrectly accepts username with trailing newline\")\n+    except:\n+        print(\"\u2713 ASCII validator correctly rejects username with trailing newline\")\n+        \n+    try:\n+        unicode_validator('testuser\\n')\n+        print(\"\u2717 Unicode validator incorrectly accepts username with trailing newline\")\n+    except:\n+        print(\"\u2713 Unicode validator correctly rejects username with trailing newline\")\n+\n+if __name__ == '__main__':\n+    test_username_with_newline()\n\\ No newline at end of file\ndiff --git a/test_edge_cases.py b/test_edge_cases.py\nnew file mode 100644\nindex 0000000000..99a78ba2d8\n--- /dev/null\n+++ b/test_edge_cases.py\n@@ -0,0 +1,41 @@\n+from django.contrib.auth.validators import ASCIIUsernameValidator, UnicodeUsernameValidator\n+\n+def test_edge_cases():\n+    ascii_validator = ASCIIUsernameValidator()\n+    unicode_validator = UnicodeUsernameValidator()\n+    \n+    test_cases = [\n+        ('normal', 'testuser', True),  # Normal valid username\n+        ('empty', '', False),  # Empty string\n+        ('newline_only', '\\n', False),  # Just a newline\n+        ('leading_newline', '\\ntestuser', False),  # Leading newline\n+        ('trailing_newline', 'testuser\\n', False),  # Trailing newline\n+        ('multiple_newlines', 'test\\nuser\\n', False),  # Multiple newlines\n+        ('carriage_return', 'testuser\\r', False),  # Carriage return\n+        ('crlf', 'testuser\\r\\n', False),  # CRLF\n+        ('special_chars', 'test.user@domain+name-here', True),  # All allowed special chars\n+        ('unicode', '\u03b1\u03b2\u03b3\u03b4\u03b5', True),  # Unicode characters (only for UnicodeValidator)\n+    ]\n+    \n+    for name, value, should_pass in test_cases:\n+        print(f\"\\nTesting: {name} = '{value}'\")\n+        \n+        # Test ASCII validator\n+        try:\n+            ascii_validator(value)\n+            result = True\n+        except:\n+            result = False\n+        expected = should_pass and (value.isascii() if hasattr(str, 'isascii') else True)\n+        print(f\"ASCII validator: {'\u2713' if result == expected else '\u2717'} ({'accepted' if result else 'rejected'}, {'should accept' if expected else 'should reject'})\")\n+        \n+        # Test Unicode validator\n+        try:\n+            unicode_validator(value)\n+            result = True\n+        except:\n+            result = False\n+        print(f\"Unicode validator: {'\u2713' if result == should_pass else '\u2717'} ({'accepted' if result else 'rejected'}, {'should accept' if should_pass else 'should reject'})\")\n+\n+if __name__ == '__main__':\n+    test_edge_cases()\n\\ No newline at end of file\n",
    "model_name_or_path": "claude-3-5-sonnet-20241022_maxiter_100_N_v2.1-no-hint-v0.5-multiaction-run_1"
  }
]