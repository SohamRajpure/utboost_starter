[
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..18af7efa77 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -869,10 +869,17 @@ class SkyCoord(ShapedLikeNDArray):\n     def __getattr__(self, attr):\n         \"\"\"\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # Check if the attribute is a property of the class\n+        # If it is, let the property getter handle it and propagate any AttributeError unchanged\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__ and isinstance(cls.__dict__[attr], property):\n+                # This will call the property getter and propagate any AttributeError unchanged\n+                return object.__getattribute__(self, attr)\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n \n             # Anything in the set of all possible frame_attr_names is handled\n",
    "model_name_or_path": "Augment_Agent"
  },
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..a4dd9ad68b 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,10 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # Check class dict first to allow properties to work normally\n+        if attr in type(self).__dict__:\n+            return object.__getattribute__(self, attr)\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n@@ -899,6 +903,7 @@ class SkyCoord(ShapedLikeNDArray):\n             f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n         )\n \n+\n     def __setattr__(self, attr, val):\n         # This is to make anything available through __getattr__ immutable\n         if \"_sky_coord_frame\" in self.__dict__:\n@@ -2221,3 +2226,4 @@ class SkyCoord(ShapedLikeNDArray):\n             return icrs_sky_coord\n         else:\n             return icrs_sky_coord.transform_to(frame)\n+\ndiff --git a/test_skycoord.py b/test_skycoord.py\nnew file mode 100644\nindex 0000000000..31f36674d1\n--- /dev/null\n+++ b/test_skycoord.py\n@@ -0,0 +1,12 @@\n+import astropy.coordinates as coord\n+\n+\n+class custom_coord(coord.SkyCoord):\n+    @property\n+    def prop(self):\n+        return self.random_attr\n+\n+\n+c = custom_coord('00h42m30s', '+41d12m00s', frame='icrs')\n+print(\"Trying to access c.prop...\")\n+c.prop\n",
    "model_name_or_path": "openhands"
  },
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..660d5302bb 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,11 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # First check if the attribute exists in the class's __dict__ (e.g. properties)\n+        # This allows subclasses to define properties that can raise their own AttributeErrors\n+        if attr in type(self).__dict__:\n+            return type(self).__dict__[attr].__get__(self)\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n@@ -2221,3 +2226,4 @@ class SkyCoord(ShapedLikeNDArray):\n             return icrs_sky_coord\n         else:\n             return icrs_sky_coord.transform_to(frame)\n+\n",
    "model_name_or_path": "aws"
  },
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex ab475f7d0d..3332c2f136 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,13 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # First check if the attribute exists in the class dictionary or any parent class\n+        for cls in type(self).__mro__:\n+            if attr in cls.__dict__:\n+                # If it's a property or descriptor, let Python's normal lookup handle it\n+                if hasattr(cls.__dict__[attr], '__get__'):\n+                    return object.__getattribute__(self, attr)\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n@@ -894,10 +901,15 @@ class SkyCoord(ShapedLikeNDArray):\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n \n-        # Fail\n-        raise AttributeError(\n-            f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n-        )\n+        # Fail with a more descriptive error message\n+        try:\n+            # Try to access the attribute to get the real error\n+            return object.__getattribute__(self, attr)\n+        except AttributeError:\n+            # If we get here, it means the attribute really doesn't exist\n+            raise AttributeError(\n+                f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n+            )\n \n     def __setattr__(self, attr, val):\n         # This is to make anything available through __getattr__ immutable\n@@ -2221,3 +2233,5 @@ class SkyCoord(ShapedLikeNDArray):\n             return icrs_sky_coord\n         else:\n             return icrs_sky_coord.transform_to(frame)\n+\n+\ndiff --git a/pyproject.toml b/pyproject.toml\nindex 486d6b9b3b..1c5f74f3a1 100644\n--- a/pyproject.toml\n+++ b/pyproject.toml\n@@ -1,5 +1,5 @@\n [build-system]\n-requires = [\"setuptools\",\n+requires = [\"setuptools==68.0.0\",\n             \"setuptools_scm>=6.2\",\n             \"wheel\",\n             \"cython==0.29.30\",\n",
    "model_name_or_path": "devlo"
  },
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -893,8 +893,19 @@\n             frame_cls = frame_transform_graph.lookup_name(attr)\n             if frame_cls is not None and self.frame.is_transformable_to(frame_cls):\n                 return self.transform_to(attr)\n-\n+        \n         # Fail\n+        try:\n+            # If we get here, then we did not find the attribute and it might have been\n+            # an attribute lookup error from within a property. We try to get the\n+            # attribute, which will raise an AttributeError if it really doesn't exist,\n+            # which means it was not from the frame itself, but from a custom property\n+            # which raised this exception.\n+            # we bypass __getattr__ for this check by doing __getattribute__\n+            super().__getattribute__(attr)\n+        except AttributeError:\n+            raise\n+        \n         raise AttributeError(\n             f\"'{self.__class__.__name__}' object has no attribute '{attr}'\"\n         )\n",
    "model_name_or_path": "gemini"
  },
  {
    "instance_id": "astropy__astropy-14096",
    "model_patch": "diff --git a/astropy/coordinates/sky_coordinate.py b/astropy/coordinates/sky_coordinate.py\nindex f158027..6781fe2 100644\n--- a/astropy/coordinates/sky_coordinate.py\n+++ b/astropy/coordinates/sky_coordinate.py\n@@ -871,6 +871,10 @@ class SkyCoord(ShapedLikeNDArray):\n         Overrides getattr to return coordinates that this can be transformed\n         to, based on the alias attr in the primary transform graph.\n         \"\"\"\n+        # Check class dict first to allow properties to work normally\n+        if attr in type(self).__dict__:\n+            return object.__getattribute__(self, attr)\n+\n         if \"_sky_coord_frame\" in self.__dict__:\n             if self._is_name(attr):\n                 return self  # Should this be a deepcopy of self?\n",
    "model_name_or_path": "agentless"
  }
]