[
  {
    "instance_id": "django__django-17087",
    "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..d46528b73c 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,15 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            \n+            # Get the full path for nested classes\n+            if '.' in klass.__qualname__:\n+                # Use qualname which includes parent class names for nested classes\n+                class_path = klass.__qualname__\n+            else:\n+                class_path = klass.__name__\n+                \n+            return \"%s.%s.%s\" % (module, class_path, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..8270cd4217\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,44 @@\n+from django.db.migrations.serializer import serializer_factory\n+\n+# Test case 1: Regular class method (non-nested)\n+class SimpleClass:\n+    @classmethod\n+    def default(cls):\n+        return \"default\"\n+\n+# Test case 2: Nested class method (original case)\n+class Profile:\n+    class Capability:\n+        BASIC = \"BASIC\"\n+        \n+        @classmethod\n+        def default(cls):\n+            return [cls.BASIC]\n+\n+# Test case 3: Multiple levels of nesting\n+class Outer:\n+    class Middle:\n+        class Inner:\n+            @classmethod\n+            def default(cls):\n+                return \"inner\"\n+\n+# Test case 4: Special characters in names\n+class Data_Model:\n+    class Complex_Type:\n+        @classmethod\n+        def default_value_(cls):\n+            return \"complex\"\n+\n+def test_serialization(cls, method_name, description):\n+    print(f\"\\nTesting {description}:\")\n+    method = getattr(cls, method_name)\n+    result, imports = serializer_factory(method).serialize()\n+    print(f\"Result: {result}\")\n+    print(f\"Imports: {imports}\")\n+\n+# Run all test cases\n+test_serialization(SimpleClass, \"default\", \"regular class method\")\n+test_serialization(Profile.Capability, \"default\", \"nested class method\")\n+test_serialization(Outer.Middle.Inner, \"default\", \"deeply nested class method\")\n+test_serialization(Data_Model.Complex_Type, \"default_value_\", \"method with special characters\")\n\\ No newline at end of file\n",
    "model_name_or_path": "codestory-midwit"
  },
  {
    "instance_id": "django__django-17087",
    "model_patch": "diff --git a/django/db/migrations/serializer.py b/django/db/migrations/serializer.py\nindex d88cda6e20..9309a434cb 100644\n--- a/django/db/migrations/serializer.py\n+++ b/django/db/migrations/serializer.py\n@@ -168,7 +168,13 @@ class FunctionTypeSerializer(BaseSerializer):\n         ):\n             klass = self.value.__self__\n             module = klass.__module__\n-            return \"%s.%s.%s\" % (module, klass.__name__, self.value.__name__), {\n+            # Use full qualname to handle nested classes\n+            qualname = (\n+                \".\".join(klass.__qualname__.split(\".\"))  # Handle nested classes\n+                if hasattr(klass, \"__qualname__\")\n+                else klass.__name__\n+            )\n+            return \"%s.%s.%s\" % (module, qualname, self.value.__name__), {\n                 \"import %s\" % module\n             }\n         # Further error checking\ndiff --git a/test.db b/test.db\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_nested_default.py b/test_nested_default.py\nnew file mode 100644\nindex 0000000000..13b4ed36e4\n--- /dev/null\n+++ b/test_nested_default.py\n@@ -0,0 +1,84 @@\n+import os\n+import sys\n+import tempfile\n+import shutil\n+from pathlib import Path\n+import django\n+from django.core.management import call_command\n+\n+# Create a temporary directory for our test project\n+temp_dir = tempfile.mkdtemp()\n+sys.path.insert(0, temp_dir)\n+os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'test_settings')\n+\n+# Create app directory\n+app_name = 'testapp'\n+app_dir = Path(temp_dir) / app_name\n+os.makedirs(app_dir)\n+with open(app_dir / '__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Create settings file\n+settings_path = Path(temp_dir) / 'test_settings.py'\n+with open(settings_path, 'w') as f:\n+    f.write('''\n+DATABASES = {\n+    'default': {\n+        'ENGINE': 'django.db.backends.sqlite3',\n+        'NAME': 'test.db',\n+    }\n+}\n+INSTALLED_APPS = [\n+    'django.contrib.contenttypes',\n+    'django.contrib.auth',\n+    'testapp',\n+]\n+SECRET_KEY = 'dummy'\n+USE_TZ = False\n+    ''')\n+\n+# Create models.py\n+with open(app_dir / 'models.py', 'w') as f:\n+    f.write('''\n+from django.db import models\n+\n+class Profile(models.Model):\n+    class Capability(models.TextChoices):\n+        BASIC = \"BASIC\", \"Basic\"\n+        PROFESSIONAL = \"PROFESSIONAL\", \"Professional\"\n+        \n+        @classmethod\n+        def default(cls) -> str:\n+            return cls.BASIC\n+            \n+    capability = models.CharField(\n+        max_length=30,\n+        choices=Capability.choices,\n+        default=Capability.default\n+    )\n+    ''')\n+\n+# Setup Django\n+django.setup()\n+\n+# Create migrations directory\n+migrations_dir = app_dir / 'migrations'\n+os.makedirs(migrations_dir)\n+with open(migrations_dir / '__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Make migrations\n+print(\"Making migrations...\")\n+call_command('makemigrations', app_name, verbosity=2)\n+\n+# Read and print the generated migration file\n+migration_files = list((app_dir / 'migrations').glob('*.py'))\n+if migration_files:\n+    print(\"\\nGenerated migration content:\")\n+    with open(migration_files[0]) as f:\n+        print(f.read())\n+else:\n+    print(\"No migration files found!\")\n+\n+# Clean up\n+shutil.rmtree(temp_dir)\n\\ No newline at end of file\n",
    "model_name_or_path": "enginelabs"
  }
]