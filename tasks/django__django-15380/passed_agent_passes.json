[
  {
    "instance_id": "django__django-15380",
    "model_patch": "diff --git a/.gitignore b/.gitignore\nindex 238fb3a200..975c5364d8 100644\n--- a/.gitignore\n+++ b/.gitignore\n@@ -16,3 +16,6 @@ tests/coverage_html/\n tests/.coverage\n build/\n tests/report/\n+*__pycache__*\n+*venv*\n+*_build*\ndiff --git a/django/db/migrations/autodetector.py b/django/db/migrations/autodetector.py\nindex bf9c2acd26..f1238a3504 100644\n--- a/django/db/migrations/autodetector.py\n+++ b/django/db/migrations/autodetector.py\n@@ -824,7 +824,7 @@ class MigrationAutodetector:\n         for app_label, model_name, field_name in sorted(self.new_field_keys - self.old_field_keys):\n             old_model_name = self.renamed_models.get((app_label, model_name), model_name)\n             old_model_state = self.from_state.models[app_label, old_model_name]\n-            new_model_state = self.to_state.models[app_label, old_model_name]\n+            new_model_state = self.to_state.models[app_label, model_name]\n             field = new_model_state.get_field(field_name)\n             # Scan to see if this is actually a rename!\n             field_dec = self.deep_deconstruct(field)\ndiff --git a/test_app/__init__.py b/test_app/__init__.py\nnew file mode 100644\nindex 0000000000..e69de29bb2\ndiff --git a/test_rename.py b/test_rename.py\nnew file mode 100644\nindex 0000000000..59ca0108b3\n--- /dev/null\n+++ b/test_rename.py\n@@ -0,0 +1,95 @@\n+import os\n+import sys\n+from django.db import models\n+from django.db.migrations.state import ProjectState\n+from django.db.migrations.autodetector import MigrationAutodetector\n+from django.db.migrations.questioner import MigrationQuestioner\n+from django.conf import settings\n+import django\n+\n+# Create test_app package\n+os.makedirs('test_app', exist_ok=True)\n+with open('test_app/__init__.py', 'w') as f:\n+    f.write('')\n+\n+# Add current directory to Python path\n+sys.path.insert(0, os.getcwd())\n+\n+# Configure Django settings\n+settings.configure(\n+    INSTALLED_APPS=['test_app'],\n+    DATABASES={'default': {'ENGINE': 'django.db.backends.sqlite3'}},\n+)\n+\n+# Setup Django\n+django.setup()\n+\n+from django.db.migrations.state import ModelState\n+\n+# Create old state\n+old_state = ProjectState()\n+old_state.add_model(ModelState(\n+    'test_app',\n+    'MyModel',\n+    [('old_field', models.CharField(max_length=100))],\n+    {\n+        'db_table': 'myapp_model',\n+        'indexes': [],\n+        'constraints': [],\n+        'unique_together': None,\n+        'index_together': None,\n+        'order_with_respect_to': None,\n+    },\n+    None,\n+))\n+\n+# Create new state\n+new_state = ProjectState()\n+new_state.add_model(ModelState(\n+    'test_app',\n+    'MyModel2',\n+    [('new_field', models.CharField(max_length=100))],\n+    {\n+        'db_table': 'myapp_model',\n+        'indexes': [],\n+        'constraints': [],\n+        'unique_together': None,\n+        'index_together': None,\n+        'order_with_respect_to': None,\n+    },\n+    None,\n+))\n+\n+# Create questioner that always answers \"yes\" to rename questions\n+class AutoYesQuestioner(MigrationQuestioner):\n+    def ask_rename(self, model_name=None, old_name=None, new_name=None, field=None):\n+        return True\n+\n+# Create empty migration graph\n+from django.db.migrations.graph import MigrationGraph\n+graph = MigrationGraph()\n+\n+# Run the autodetector\n+detector = MigrationAutodetector(\n+    old_state,\n+    new_state,\n+    questioner=AutoYesQuestioner()\n+)\n+\n+# Initialize internal state\n+detector._detect_changes(graph)\n+\n+print(\"\\nOld model keys:\", detector.old_model_keys)\n+print(\"New model keys:\", detector.new_model_keys)\n+print(\"Old field keys:\", detector.old_field_keys)\n+print(\"New field keys:\", detector.new_field_keys)\n+\n+changes = detector.changes(graph)\n+\n+print(\"\\nChanges detected:\")\n+for app_label, migrations in changes.items():\n+    print(f\"\\nApp: {app_label}\")\n+    for migration in migrations:\n+        print(\"\\nOperations:\")\n+        for operation in migration.operations:\n+            print(f\"  {operation.__class__.__name__}: {operation.describe()}\")\n\\ No newline at end of file\n",
    "model_name_or_path": "emergent-e1-241223"
  }
]