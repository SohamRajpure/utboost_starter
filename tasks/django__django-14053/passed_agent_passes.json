[
  {
    "instance_id": "django__django-14053",
    "model_patch": "diff --git a/django/contrib/staticfiles/storage.py b/django/contrib/staticfiles/storage.py\nindex 494890cc23..2f722005d4 100644\n--- a/django/contrib/staticfiles/storage.py\n+++ b/django/contrib/staticfiles/storage.py\n@@ -220,23 +220,30 @@ class HashedFilesMixin:\n \n         # where to store the new paths\n         hashed_files = {}\n+        # Track which files have been yielded to avoid duplicates\n+        yielded_files = set()\n \n         # build a list of adjustable files\n         adjustable_paths = [\n             path for path in paths\n             if matches_patterns(path, self._patterns)\n         ]\n-        # Do a single pass first. Post-process all files once, then repeat for\n-        # adjustable files.\n+\n+        # Process all files first\n         for name, hashed_name, processed, _ in self._post_process(paths, adjustable_paths, hashed_files):\n-            yield name, hashed_name, processed\n+            if name not in yielded_files and processed:\n+                yielded_files.add(name)\n+                yield name, hashed_name, processed\n \n+        # Then focus on adjustable files that might need multiple passes\n         paths = {path: paths[path] for path in adjustable_paths}\n \n         for i in range(self.max_post_process_passes):\n             substitutions = False\n             for name, hashed_name, processed, subst in self._post_process(paths, adjustable_paths, hashed_files):\n-                yield name, hashed_name, processed\n+                if name not in yielded_files and processed:\n+                    yielded_files.add(name)\n+                    yield name, hashed_name, processed\n                 substitutions = substitutions or subst\n \n             if not substitutions:\ndiff --git a/reproduce_error.py b/reproduce_error.py\nnew file mode 100644\nindex 0000000000..38ab6220a6\n--- /dev/null\n+++ b/reproduce_error.py\n@@ -0,0 +1,54 @@\n+import os\n+import tempfile\n+from django.conf import settings\n+from django.contrib.staticfiles.storage import HashedFilesMixin, StaticFilesStorage\n+from django.core.files.base import ContentFile\n+\n+# Setup minimal Django settings\n+settings.configure(\n+    DEBUG=False,\n+    STATIC_URL='/static/',\n+)\n+\n+class TestStorage(HashedFilesMixin, StaticFilesStorage):\n+    def __init__(self):\n+        self.temp_dir = tempfile.mkdtemp()\n+        super().__init__(location=self.temp_dir)\n+\n+def main():\n+    # Create a test storage\n+    storage = TestStorage()\n+    \n+    # Create a test CSS file with references\n+    css_content = \"\"\"\n+    .test {\n+        background: url(\"bg.png\");\n+    }\n+    .other {\n+        background: url(\"other.png\");\n+    }\n+    \"\"\"\n+    \n+    # Create the files\n+    storage._save('styles.css', ContentFile(css_content.encode()))\n+    storage._save('bg.png', ContentFile(b'fake png'))\n+    storage._save('other.png', ContentFile(b'other fake png'))\n+    \n+    # Process the files and track yields\n+    paths = {\n+        'styles.css': (storage, 'styles.css'),\n+        'bg.png': (storage, 'bg.png'),\n+        'other.png': (storage, 'other.png'),\n+    }\n+    \n+    print(\"Processing files...\")\n+    processed_files = {}\n+    for name, hashed_name, processed in storage.post_process(paths):\n+        if name in processed_files:\n+            print(f\"WARNING: File {name} was yielded multiple times!\")\n+            print(f\"Previous hashed name: {processed_files[name]}\")\n+            print(f\"Current hashed name: {hashed_name}\")\n+        processed_files[name] = hashed_name\n+\n+if __name__ == '__main__':\n+    main()\n\\ No newline at end of file\n",
    "model_name_or_path": "codestory-midwit"
  }
]