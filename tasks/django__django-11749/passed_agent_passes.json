[
  {
    "instance_id": "django__django-11749",
    "model_patch": "diff --git a/django/core/management/__init__.py b/django/core/management/__init__.py\nindex 5f2e64761e..cd8d8d155b 100644\n--- a/django/core/management/__init__.py\n+++ b/django/core/management/__init__.py\n@@ -130,11 +130,21 @@ def call_command(command_name, *args, **options):\n                 yield opt\n \n     parser_actions = list(get_actions(parser))\n+    # Get destinations from options that belong to required mutex groups\n+    required_group_dests = set()\n+    for action in parser._mutually_exclusive_groups:\n+        if action.required:\n+            for opt in action._group_actions:\n+                if opt.dest in options:\n+                    required_group_dests.add(opt.dest)\n+\n     # Any required arguments which are passed in via **options must be passed\n-    # to parse_args().\n+    # to parse_args() - either individual required args or args from required mutex groups\n     parse_args += [\n         '{}={}'.format(min(opt.option_strings), arg_options[opt.dest])\n-        for opt in parser_actions if opt.required and opt.dest in options\n+        for opt in parser_actions \n+        if (opt.dest in options and \n+            (opt.required or opt.dest in required_group_dests))\n     ]\n     defaults = parser.parse_args(args=parse_args)\n     defaults = dict(defaults._get_kwargs(), **arg_options)\ndiff --git a/test_mutual_exclusion.py b/test_mutual_exclusion.py\nnew file mode 100644\nindex 0000000000..bc348b9ee1\n--- /dev/null\n+++ b/test_mutual_exclusion.py\n@@ -0,0 +1,36 @@\n+from django.core.management import BaseCommand, CommandParser, call_command\n+\n+class Command(BaseCommand):\n+    def add_arguments(self, parser):\n+        shop = parser.add_mutually_exclusive_group(required=True)\n+        shop.add_argument('--shop-id', nargs='?', type=int, default=None, dest='shop_id')\n+        shop.add_argument('--shop', nargs='?', type=str, default=None, dest='shop_name')\n+\n+    def handle(self, *args, **options):\n+        print(f\"Received options: {options}\")\n+\n+# Simulate the command being in management.commands\n+Command.__module__ = 'management.commands.my_command'\n+\n+# Test the command\n+def test_command():\n+    try:\n+        print(\"Testing with kwarg shop_id=1...\")\n+        call_command(Command(), shop_id=1)\n+        print(\"Success!\")\n+    except Exception as e:\n+        print(f\"Failed: {e}\")\n+\n+    try:\n+        print(\"\\nTesting with arg --shop-id=1...\")\n+        call_command(Command(), '--shop-id=1')\n+        print(\"Success!\")\n+    except Exception as e:\n+        print(f\"Failed: {e}\")\n+\n+if __name__ == '__main__':\n+    from django.conf import settings\n+    settings.configure(SECRET_KEY='dummy_key')\n+    import django\n+    django.setup()\n+    test_command()\n\\ No newline at end of file\n",
    "model_name_or_path": "enginelabs"
  }
]