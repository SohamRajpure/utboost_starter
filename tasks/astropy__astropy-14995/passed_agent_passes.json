[
  {
    "instance_id": "astropy__astropy-14995",
    "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..b7d85e660c 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,16 +512,21 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n+        # If neither has a mask or handle_mask is None, return None\n         if (\n             self.mask is None and operand is not None and operand.mask is None\n         ) or handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n-            return deepcopy(operand.mask)\n+        # If operand is None (for collapse operations), return a copy of self.mask\n         elif operand is None:\n             return deepcopy(self.mask)\n+        # If self has no mask but operand does, return a copy of operand's mask\n+        elif self.mask is None and operand.mask is not None:\n+            return deepcopy(operand.mask)\n+        # If self has a mask but operand doesn't, return a copy of self's mask\n+        elif self.mask is not None and operand.mask is None:\n+            return deepcopy(self.mask)\n+        # If both have masks, apply the handle_mask operation\n         else:\n             # Now lets calculate the resulting mask (operation enforces copy)\n             return handle_mask(self.mask, operand.mask, **kwds)\n",
    "model_name_or_path": "20241209_babelcloud_gru"
  },
  {
    "instance_id": "astropy__astropy-14995",
    "model_patch": "diff --git a/astropy/nddata/mixins/ndarithmetic.py b/astropy/nddata/mixins/ndarithmetic.py\nindex 4153dfccb2..7df0135b0f 100644\n--- a/astropy/nddata/mixins/ndarithmetic.py\n+++ b/astropy/nddata/mixins/ndarithmetic.py\n@@ -512,19 +512,26 @@ class NDArithmeticMixin:\n             If neither had a mask ``None`` is returned. Otherwise\n             ``handle_mask`` must create (and copy) the returned mask.\n         \"\"\"\n-        # If only one mask is present we need not bother about any type checks\n-        if (\n-            self.mask is None and operand is not None and operand.mask is None\n-        ) or handle_mask is None:\n+        # If handle_mask is None, return None\n+        if handle_mask is None:\n             return None\n-        elif self.mask is None and operand is not None:\n-            # Make a copy so there is no reference in the result.\n+            \n+        # If operand is a scalar or doesn't have a mask attribute, treat it as having no mask\n+        if not hasattr(operand, 'mask'):\n+            return deepcopy(self.mask)\n+            \n+        # If neither has a mask, return None\n+        if self.mask is None and operand.mask is None:\n+            return None\n+            \n+        # If only one has a mask, return a copy of that mask\n+        if self.mask is None:\n             return deepcopy(operand.mask)\n-        elif operand is None:\n+        if operand.mask is None:\n             return deepcopy(self.mask)\n-        else:\n-            # Now lets calculate the resulting mask (operation enforces copy)\n-            return handle_mask(self.mask, operand.mask, **kwds)\n+            \n+        # If both have masks, apply the handle_mask function\n+        return handle_mask(self.mask, operand.mask, **kwds)\n \n     def _arithmetic_wcs(self, operation, operand, compare_wcs, **kwds):\n         \"\"\"\ndiff --git a/reproduce.py b/reproduce.py\nnew file mode 100644\nindex 0000000000..6abda659a3\n--- /dev/null\n+++ b/reproduce.py\n@@ -0,0 +1,23 @@\n+import numpy as np\n+from astropy.nddata import NDDataRef\n+\n+array = np.array([[0, 1, 0], [1, 0, 1], [0, 1, 0]])\n+mask = np.array([[0, 1, 64], [8, 0, 1], [2, 1, 0]])\n+\n+nref_nomask = NDDataRef(array)\n+nref_mask = NDDataRef(array, mask=mask)\n+\n+print(\"Test 1: multiply no mask by constant (no mask * no mask)\")\n+print(nref_nomask.multiply(1., handle_mask=np.bitwise_or).mask)\n+\n+print(\"\\nTest 2: multiply no mask by itself (no mask * no mask)\")\n+print(nref_nomask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)\n+\n+print(\"\\nTest 3: multiply mask by constant (mask * no mask)\")\n+print(nref_mask.multiply(1., handle_mask=np.bitwise_or).mask)\n+\n+print(\"\\nTest 4: multiply mask by itself (mask * mask)\")\n+print(nref_mask.multiply(nref_mask, handle_mask=np.bitwise_or).mask)\n+\n+print(\"\\nTest 5: multiply mask by no mask (mask * no mask)\")\n+print(nref_mask.multiply(nref_nomask, handle_mask=np.bitwise_or).mask)\n\\ No newline at end of file\n",
    "model_name_or_path": "claude-3-5-sonnet-20241022_maxiter_100_N_v2.1-no-hint-v0.5-multiaction-run_1"
  }
]