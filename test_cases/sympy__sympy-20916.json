[{"repo": "sympy/sympy", "instance_id": "sympy__sympy-20916", "base_commit": "82298df6a51491bfaad0c6d1980e7e3ca808ae93", "patch": "diff --git a/sympy/printing/conventions.py b/sympy/printing/conventions.py\n--- a/sympy/printing/conventions.py\n+++ b/sympy/printing/conventions.py\n@@ -7,7 +7,7 @@\n from collections.abc import Iterable\n from sympy import Derivative\n \n-_name_with_digits_p = re.compile(r'^([a-zA-Z]+)([0-9]+)$')\n+_name_with_digits_p = re.compile(r'^([^\\W\\d_]+)(\\d+)$', re.U)\n \n \n def split_super_sub(text):\n@@ -60,7 +60,7 @@ def split_super_sub(text):\n         else:\n             raise RuntimeError(\"This should never happen.\")\n \n-    # make a little exception when a name ends with digits, i.e. treat them\n+    # Make a little exception when a name ends with digits, i.e. treat them\n     # as a subscript too.\n     m = _name_with_digits_p.match(name)\n     if m:\n", "test_patch": "from sympy.printing.conventions import split_super_sub\nfrom sympy.printing.pretty.pretty_symbology import pretty_symbol\nfrom sympy.testing.pytest import XFAIL, raises\n\ndef test_split_super_sub_and_pretty_symbol():\n    \"\"\"\n    Test case for the split_super_sub() and pretty_symbol() functions\n    with the focus on variables ending with digits and Greek letters followed by digits.\n    \"\"\"\n    # Test split_super_sub with regular names ending with digits\n    assert split_super_sub(\"x2\") == (\"x\", [], [\"2\"]), \"Failed to split name ending with digit\"\n    # Test split_super_sub with Greek names ending with digits\n    assert split_super_sub(\"alpha2\") == (\"alpha\", [], [\"2\"]), \"Failed to split Greek name with digit tail\"\n    \n    # Ensure pretty_symbol handles regular names with subscript correctly\n    name, sups, subs = split_super_sub(\"x2\")\n    assert pretty_symbol(name, False) == \"x\u2082\", \"Pretty print failed for regular name with subscript\"\n    # Ensure pretty_symbol handles Greek names with subscript correctly\n    name, sups, subs = split_super_sub(\"alpha2\")\n    assert pretty_symbol(name, False) == \"\u03b1\u2082\", \"Pretty print failed for Greek name with subscript\"\n    \n    # Test edge cases\n    # No digit case\n    assert split_super_sub(\"x\") == (\"x\", [], []), \"Failed on variable name without digits\"\n    # Test raw number string\n    assert split_super_sub(\"123\") == (\"\", [], [\"123\"]), \"Failed to split raw number string\"\n    \n    # Unicode and mixed characters case\n    assert split_super_sub(\"\u03a93mix\") == (\"\u03a9\", [], [\"3mix\"]), \"Failed to split mixed characters appropriately\"\n\n    # Name with multiple digit groups\n    assert split_super_sub(\"theta12gamma34\") == (\"theta12gamma\", [], [\"34\"]), \"Failed on multiple digit groups\"\n\n    # Test error handling\n    with raises(ValueError):\n        split_super_sub(\"\")  # Test with empty string", "problem_statement": "pprint unicode does not format subscripts on Greek letters\nGood:\r\n\r\n[ -t\u2080\u22c5w\u2080   -t\u2081\u22c5w\u2080   -t\u2082\u22c5w\u2080]\r\n\r\n\r\nBad:\r\n\r\n[ -t\u2080\u22c5\u03c90   -t\u2081\u22c5\u03c90   -t\u2082\u22c5\u03c90]\r\n\r\n\r\n\n", "hints_text": "Could you provide the code which generates this?\n```\r\nimport sympy as sp\r\nw=[sp.Symbol(f'w{i}') for i in range(4)]\r\n\u03c9=[sp.Symbol(f'\u03c9{i}') for i in range(4)]\r\nsp.pprint(w) # -> [w\u2080, w\u2081, w\u2082, w\u2083]\r\nsp.pprint(\u03c9) # -> [\u03c90, \u03c91, \u03c92, \u03c93]\r\n```\r\n\nNot sure what the standard syntax is for defining variables with subscripts, but if you add an underscore between the main part of the variable and the subscript, it should render correctly:\r\n\r\n```pycon\r\n>>> \u03c9=[sp.Symbol(f'\u03c9_{i}') for i in range(4)]\r\n>>> sp.pprint(\u03c9)\r\n[\u03c9\u2080, \u03c9\u2081, \u03c9\u2082, \u03c9\u2083]\r\n```\nOk, thanks.   But I can't see why Greek letters should be treated any differently to Latin.   That's ethnic bias!\nThis is a bug. They should both work properly. It looks like there is a regular expression in sympy/printing/conventions.py that assumes that the letter parts of symbol names are ASCII letters. It is using `[a-zA-Z]` but it should be using `\\w` so that it matches Unicode word characters. ", "created_at": "2021-02-06T05:44:34Z", "version": "1.8", "FAIL_TO_PASS": "[\"test_super_sub\"]", "PASS_TO_PASS": "[\"test_requires_partial\"]", "environment_setup_commit": "3ac1464b8840d5f8b618a654f9fbf09c452fe969", "difficulty": "<15 min fix"}]